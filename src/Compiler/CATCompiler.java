package Compiler;

import StatStudio.CATStatStudio;
import commanLib.CATFeedback.CATFeedback;
import commanLib.CatFileExtensions;
import commanLib.Dialog_ExceptionHandler;
import commanLib.TextLineNumber;
import commanLib.ModelData;
import commanLib.MyImageRenderer;
import commanLib.PerformRecord;
import commanLib.StatisticData;
import commanLib.CatFileFilter;
import commanLib.SystemProperties;
import editor.CATModeler;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Rectangle;
import java.awt.Toolkit;
import java.io.*;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.NoSuchElementException;
import java.util.StringTokenizer;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.Element;
import javax.swing.text.Utilities;
import org.apache.tools.ant.util.FileUtils;
import org.hyperic.sigar.CpuPerc;
import org.hyperic.sigar.Sigar;
import org.hyperic.sigar.SigarException;


public class CATCompiler extends javax.swing.JFrame 
{
    private SystemProperties systemProp=null;
    
    private String mdlPath="";
    private String mdlExts[]=null;
    
    private String srcCdPath="";
    //private int srcCdLOC=-1;
    private String SOURCECODE="";
    private boolean savedSrcCd=false;
    
    private CompilerModelData cmMdlData=null;
    //private ModelData model= null;
    
    private int statisticFlag=-1;
    private StatisticData statData = null;
    private CATStatStudio statStdioFrame = null;
    
    private static final int RECORD=0;
    private static final int RESUME=1;
    private static final int PAUSE=2;
    private static final int STOP=3;

    public CATCompiler() {
        ConstructorBody();
        
        //DELETE
        systemProp= new SystemProperties();
    }
    
    public CATCompiler(SystemProperties sysProp) {
        ConstructorBody();        
        systemProp=sysProp;
    }
    
    
    public void ConstructorBody() {
        
        //(1)Set defualt look n feel
          try{
              //UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
          }catch(Exception e)
          { 
              //System.out.println("Windows isn't available");               
          }
          
        initComponents();
        
        //SetIcon
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/Compiler/images/CAT_Compiler_Icon.png")));
        
        this.setLocationRelativeTo(null);  
        
        //GUI Intiatization        
        fileChooserModel.setAcceptAllFileFilterUsed(false);
        fileChooserCode.setAcceptAllFileFilterUsed(false);
        fileChooserStat.setAcceptAllFileFilterUsed(false);
        
        //statistic buttons
        resetStatisticButtons(true);
        
        //main TabbedPane        
        //(1)Source Code
        scrollPane_code.setRowHeaderView(new TextLineNumber(textA_scrCd));
                
        //(2) Token Stream
        scrollPane_tknStrm.setRowHeaderView(new TextLineNumber(textP_tknStrm));
        
        setEnableMainTabbed(false);        
        
        //Message Table
        table_msg.getTableHeader().setVisible(false);
        table_msg.getTableHeader().setPreferredSize(new Dimension(0, 0));
        table_msg.getColumnModel().getColumn(0).setCellRenderer(new MyImageRenderer());               
        
        //Maximize frame
        setExtendedState(JFrame.MAXIMIZED_BOTH);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileChooserModel = new javax.swing.JFileChooser();
        fileChooserCode = new javax.swing.JFileChooser();
        btnGp_symTb_srchCh = new javax.swing.ButtonGroup();
        fileChooserStat = new javax.swing.JFileChooser();
        toolBar = new javax.swing.JToolBar();
        btn_toolbar_LdMdl = new javax.swing.JButton();
        jSeparator4 = new javax.swing.JToolBar.Separator();
        btn_toolbar_NewSrc = new javax.swing.JButton();
        btn_toolbar_openSrc = new javax.swing.JButton();
        btn_toolbar_saveSrc = new javax.swing.JButton();
        jSeparator5 = new javax.swing.JToolBar.Separator();
        btn_toolbar_compile = new javax.swing.JButton();
        jSeparator6 = new javax.swing.JToolBar.Separator();
        btn_toolbar_record = new javax.swing.JButton();
        btn_toolbar_resume = new javax.swing.JButton();
        btn_toolbar_pause = new javax.swing.JButton();
        btn_toolbar_stop = new javax.swing.JButton();
        btn_toolBar_saveStat = new javax.swing.JButton();
        btn_toolbar_StatStudio = new javax.swing.JButton();
        statusPanel = new javax.swing.JPanel();
        progrsBar = new javax.swing.JProgressBar();
        statusMsg = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        tabPane_symbl = new javax.swing.JTabbedPane();
        panel_SymTb = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        table_symTb = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        radioBtn_symTb_Lxm = new javax.swing.JRadioButton();
        radioBtn_symTb_tkn = new javax.swing.JRadioButton();
        textF_symTb_srchStr = new javax.swing.JTextField();
        btn_symTb_srch = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table_errors = new javax.swing.JTable();
        tabbedPaneMAIN = new javax.swing.JTabbedPane();
        panel1_SrcCd = new javax.swing.JPanel();
        lbl_ScrPath = new javax.swing.JLabel();
        lbl_curLoc = new javax.swing.JLabel();
        scrollPane_code = new javax.swing.JScrollPane();
        textA_scrCd = new javax.swing.JTextArea();
        panel2_Lexical = new javax.swing.JPanel();
        scrollPane_tknStrm = new javax.swing.JScrollPane();
        textP_tknStrm = new javax.swing.JTextPane();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        table_msg = new javax.swing.JTable();
        menuBar = new javax.swing.JMenuBar();
        menu_file = new javax.swing.JMenu();
        menuItem_LdMdl = new javax.swing.JMenuItem();
        menuItem_properties = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        menuItem_newCode = new javax.swing.JMenuItem();
        menuItem_openFile = new javax.swing.JMenuItem();
        menuItem_SaveCode = new javax.swing.JMenuItem();
        menuItemSaveAsCode = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        menuItem_exit = new javax.swing.JMenuItem();
        menu_edit = new javax.swing.JMenu();
        menu_compile = new javax.swing.JMenu();
        menuItem_Compile = new javax.swing.JMenuItem();
        jSeparator7 = new javax.swing.JPopupMenu.Separator();
        menuItem_compile_record = new javax.swing.JMenuItem();
        menuItem_compile_resume = new javax.swing.JMenuItem();
        menuItem_compile_pause = new javax.swing.JMenuItem();
        menuItem_compile_stop = new javax.swing.JMenuItem();
        menuItem_compile_saveStat = new javax.swing.JMenuItem();
        menuItem_compile_StatStudio = new javax.swing.JMenuItem();
        menu_env = new javax.swing.JMenu();
        menuItem_env_sysProp = new javax.swing.JMenuItem();
        menu_help = new javax.swing.JMenu();
        help_feedback = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();

        fileChooserModel.setFileFilter(new CompilerTextFilter("mdc"));

        fileChooserCode.setDialogTitle("Source Code");

        fileChooserStat.setFileFilter(new CatFileFilter(CatFileExtensions.STAT_FILE_EXT));

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Compiler Automation Tool â€“ Compiler | [Untitled]");
        setMinimumSize(new java.awt.Dimension(400, 300));

        toolBar.setFloatable(false);
        toolBar.setRollover(true);

        btn_toolbar_LdMdl.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Compiler/images/model.png"))); // NOI18N
        btn_toolbar_LdMdl.setToolTipText("Load Model (Ctrl+M)");
        btn_toolbar_LdMdl.setFocusable(false);
        btn_toolbar_LdMdl.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btn_toolbar_LdMdl.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btn_toolbar_LdMdl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_toolbar_LdMdlActionPerformed(evt);
            }
        });
        toolBar.add(btn_toolbar_LdMdl);
        toolBar.add(jSeparator4);

        btn_toolbar_NewSrc.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Compiler/images/newSrcCd.png"))); // NOI18N
        btn_toolbar_NewSrc.setToolTipText("New Source Code (Ctrl+N)");
        btn_toolbar_NewSrc.setEnabled(false);
        btn_toolbar_NewSrc.setFocusable(false);
        btn_toolbar_NewSrc.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btn_toolbar_NewSrc.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btn_toolbar_NewSrc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_toolbar_NewSrcActionPerformed(evt);
            }
        });
        toolBar.add(btn_toolbar_NewSrc);

        btn_toolbar_openSrc.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Compiler/images/openSrcCd.png"))); // NOI18N
        btn_toolbar_openSrc.setToolTipText("Open Source Code (Ctrl+O)");
        btn_toolbar_openSrc.setEnabled(false);
        btn_toolbar_openSrc.setFocusable(false);
        btn_toolbar_openSrc.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btn_toolbar_openSrc.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btn_toolbar_openSrc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_toolbar_openSrcActionPerformed(evt);
            }
        });
        toolBar.add(btn_toolbar_openSrc);

        btn_toolbar_saveSrc.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Compiler/images/save.png"))); // NOI18N
        btn_toolbar_saveSrc.setToolTipText("Save Source Code (Ctrl+S)");
        btn_toolbar_saveSrc.setEnabled(false);
        btn_toolbar_saveSrc.setFocusable(false);
        btn_toolbar_saveSrc.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btn_toolbar_saveSrc.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btn_toolbar_saveSrc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_toolbar_saveSrcActionPerformed(evt);
            }
        });
        toolBar.add(btn_toolbar_saveSrc);
        toolBar.add(jSeparator5);

        btn_toolbar_compile.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Compiler/images/compileStatus/2_compiled.png"))); // NOI18N
        btn_toolbar_compile.setToolTipText("Compile (Ctrl+F9)");
        btn_toolbar_compile.setEnabled(false);
        btn_toolbar_compile.setFocusable(false);
        btn_toolbar_compile.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btn_toolbar_compile.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btn_toolbar_compile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_toolbar_compileActionPerformed(evt);
            }
        });
        toolBar.add(btn_toolbar_compile);
        toolBar.add(jSeparator6);

        btn_toolbar_record.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Compiler/images/record.png"))); // NOI18N
        btn_toolbar_record.setToolTipText("Record");
        btn_toolbar_record.setFocusable(false);
        btn_toolbar_record.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btn_toolbar_record.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btn_toolbar_record.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_toolbar_recordActionPerformed(evt);
            }
        });
        toolBar.add(btn_toolbar_record);

        btn_toolbar_resume.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Compiler/images/play.png"))); // NOI18N
        btn_toolbar_resume.setToolTipText("Resume");
        btn_toolbar_resume.setFocusable(false);
        btn_toolbar_resume.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btn_toolbar_resume.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btn_toolbar_resume.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_toolbar_resumeActionPerformed(evt);
            }
        });
        toolBar.add(btn_toolbar_resume);

        btn_toolbar_pause.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Compiler/images/pause.png"))); // NOI18N
        btn_toolbar_pause.setToolTipText("Pause");
        btn_toolbar_pause.setFocusable(false);
        btn_toolbar_pause.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btn_toolbar_pause.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btn_toolbar_pause.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_toolbar_pauseActionPerformed(evt);
            }
        });
        toolBar.add(btn_toolbar_pause);

        btn_toolbar_stop.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Compiler/images/stop.png"))); // NOI18N
        btn_toolbar_stop.setToolTipText("Stop");
        btn_toolbar_stop.setFocusable(false);
        btn_toolbar_stop.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btn_toolbar_stop.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btn_toolbar_stop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_toolbar_stopActionPerformed(evt);
            }
        });
        toolBar.add(btn_toolbar_stop);

        btn_toolBar_saveStat.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Compiler/images/saveStat.png"))); // NOI18N
        btn_toolBar_saveStat.setToolTipText("Save Performance Data");
        btn_toolBar_saveStat.setFocusable(false);
        btn_toolBar_saveStat.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btn_toolBar_saveStat.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btn_toolBar_saveStat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_toolBar_saveStatActionPerformed(evt);
            }
        });
        toolBar.add(btn_toolBar_saveStat);

        btn_toolbar_StatStudio.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Compiler/images/catStatStd.png"))); // NOI18N
        btn_toolbar_StatStudio.setToolTipText("Open in CAT Statistic Studio");
        btn_toolbar_StatStudio.setFocusable(false);
        btn_toolbar_StatStudio.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btn_toolbar_StatStudio.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btn_toolbar_StatStudio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_toolbar_StatStudioActionPerformed(evt);
            }
        });
        toolBar.add(btn_toolbar_StatStudio);

        statusPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        statusPanel.setPreferredSize(new java.awt.Dimension(900, 21));

        statusMsg.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);

        jLabel1.setText("Â© 2013 Gagandeep, Hargeet, Amarpreet, Harpreet");

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator1.setPreferredSize(new java.awt.Dimension(10, 15));

        javax.swing.GroupLayout statusPanelLayout = new javax.swing.GroupLayout(statusPanel);
        statusPanel.setLayout(statusPanelLayout);
        statusPanelLayout.setHorizontalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, statusPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 418, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 5, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(statusMsg, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(progrsBar, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        statusPanelLayout.setVerticalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(progrsBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(statusMsg, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel1)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        table_symTb.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Lexeme", "Token", "Line No."
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(table_symTb);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Search", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(0, 51, 255))); // NOI18N

        btnGp_symTb_srchCh.add(radioBtn_symTb_Lxm);
        radioBtn_symTb_Lxm.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        radioBtn_symTb_Lxm.setSelected(true);
        radioBtn_symTb_Lxm.setText("Lexeme");

        btnGp_symTb_srchCh.add(radioBtn_symTb_tkn);
        radioBtn_symTb_tkn.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        radioBtn_symTb_tkn.setText("Token");

        textF_symTb_srchStr.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        textF_symTb_srchStr.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                textF_symTb_srchStrKeyTyped(evt);
            }
        });

        btn_symTb_srch.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        btn_symTb_srch.setText("Search");
        btn_symTb_srch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_symTb_srchActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(radioBtn_symTb_Lxm)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(radioBtn_symTb_tkn)
                .addGap(0, 107, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(textF_symTb_srchStr)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btn_symTb_srch))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(radioBtn_symTb_Lxm, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(radioBtn_symTb_tkn, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textF_symTb_srchStr, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_symTb_srch, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 8, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout panel_SymTbLayout = new javax.swing.GroupLayout(panel_SymTb);
        panel_SymTb.setLayout(panel_SymTbLayout);
        panel_SymTbLayout.setHorizontalGroup(
            panel_SymTbLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        panel_SymTbLayout.setVerticalGroup(
            panel_SymTbLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_SymTbLayout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 463, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        tabPane_symbl.addTab("Symbol Table", new javax.swing.ImageIcon(getClass().getResource("/Compiler/images/SymTable.png")), panel_SymTb, "Symbol Table"); // NOI18N

        table_errors.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "", "Error Type", "[LineNo,Pos]", "Recovery Mode"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table_errors.getTableHeader().setReorderingAllowed(false);
        table_errors.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                table_errorsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(table_errors);
        table_errors.getColumnModel().getColumn(0).setMinWidth(30);
        table_errors.getColumnModel().getColumn(0).setPreferredWidth(30);
        table_errors.getColumnModel().getColumn(0).setMaxWidth(50);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 235, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 544, Short.MAX_VALUE)
        );

        tabPane_symbl.addTab("Errors", new javax.swing.ImageIcon(getClass().getResource("/Compiler/images/compileStatus/-1_Error.png")), jPanel2, "Errors"); // NOI18N

        lbl_curLoc.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);

        textA_scrCd.setColumns(20);
        textA_scrCd.setRows(5);
        textA_scrCd.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                textA_scrCdCaretUpdate(evt);
            }
        });
        textA_scrCd.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                textA_scrCdKeyTyped(evt);
            }
        });
        scrollPane_code.setViewportView(textA_scrCd);

        javax.swing.GroupLayout panel1_SrcCdLayout = new javax.swing.GroupLayout(panel1_SrcCd);
        panel1_SrcCd.setLayout(panel1_SrcCdLayout);
        panel1_SrcCdLayout.setHorizontalGroup(
            panel1_SrcCdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel1_SrcCdLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lbl_ScrPath, javax.swing.GroupLayout.PREFERRED_SIZE, 384, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 63, Short.MAX_VALUE)
                .addComponent(lbl_curLoc, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addComponent(scrollPane_code)
        );
        panel1_SrcCdLayout.setVerticalGroup(
            panel1_SrcCdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel1_SrcCdLayout.createSequentialGroup()
                .addComponent(scrollPane_code, javax.swing.GroupLayout.DEFAULT_SIZE, 414, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panel1_SrcCdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_ScrPath, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl_curLoc, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4))
        );

        tabbedPaneMAIN.addTab("Source Code", new javax.swing.ImageIcon(getClass().getResource("/Compiler/images/srcCode_tab.png")), panel1_SrcCd, "Source Code"); // NOI18N

        textP_tknStrm.setEditable(false);
        textP_tknStrm.setFont(new java.awt.Font("Monospaced", 0, 13)); // NOI18N
        textP_tknStrm.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        scrollPane_tknStrm.setViewportView(textP_tknStrm);

        jLabel2.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        jLabel2.setText("  Legends : ");

        jLabel3.setBackground(new java.awt.Color(0, 0, 233));
        jLabel3.setOpaque(true);

        jLabel4.setBackground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Keywords");

        jLabel5.setBackground(new java.awt.Color(0, 153, 0));
        jLabel5.setOpaque(true);

        jLabel6.setBackground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Identifier");

        jLabel7.setBackground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("String/Character");

        jLabel8.setBackground(new java.awt.Color(222, 122, 0));
        jLabel8.setOpaque(true);

        javax.swing.GroupLayout panel2_LexicalLayout = new javax.swing.GroupLayout(panel2_Lexical);
        panel2_Lexical.setLayout(panel2_LexicalLayout);
        panel2_LexicalLayout.setHorizontalGroup(
            panel2_LexicalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrollPane_tknStrm, javax.swing.GroupLayout.DEFAULT_SIZE, 629, Short.MAX_VALUE)
            .addGroup(panel2_LexicalLayout.createSequentialGroup()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        panel2_LexicalLayout.setVerticalGroup(
            panel2_LexicalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel2_LexicalLayout.createSequentialGroup()
                .addComponent(scrollPane_tknStrm, javax.swing.GroupLayout.DEFAULT_SIZE, 414, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panel2_LexicalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(panel2_LexicalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5))
        );

        tabbedPaneMAIN.addTab("Lexical Analysis", new javax.swing.ImageIcon(getClass().getResource("/Compiler/images/lexical.png")), panel2_Lexical, "Lexical Analysis"); // NOI18N

        jScrollPane4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Message", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(0, 51, 255))); // NOI18N

        table_msg.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "", "Time", "Message"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table_msg.setRowHeight(18);
        table_msg.getTableHeader().setReorderingAllowed(false);
        jScrollPane4.setViewportView(table_msg);
        table_msg.getColumnModel().getColumn(0).setMinWidth(20);
        table_msg.getColumnModel().getColumn(0).setPreferredWidth(20);
        table_msg.getColumnModel().getColumn(0).setMaxWidth(20);
        table_msg.getColumnModel().getColumn(1).setMinWidth(80);
        table_msg.getColumnModel().getColumn(1).setPreferredWidth(80);
        table_msg.getColumnModel().getColumn(1).setMaxWidth(80);

        menu_file.setText("File");

        menuItem_LdMdl.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_M, java.awt.event.InputEvent.CTRL_MASK));
        menuItem_LdMdl.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Compiler/images/model.png"))); // NOI18N
        menuItem_LdMdl.setText("Load Model");
        menuItem_LdMdl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItem_LdMdlActionPerformed(evt);
            }
        });
        menu_file.add(menuItem_LdMdl);

        menuItem_properties.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Compiler/images/MdlProperties.png"))); // NOI18N
        menuItem_properties.setText("Model Properties");
        menuItem_properties.setEnabled(false);
        menuItem_properties.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItem_propertiesActionPerformed(evt);
            }
        });
        menu_file.add(menuItem_properties);
        menu_file.add(jSeparator3);

        menuItem_newCode.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        menuItem_newCode.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Compiler/images/newSrcCd.png"))); // NOI18N
        menuItem_newCode.setText("New Source Code");
        menuItem_newCode.setEnabled(false);
        menuItem_newCode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItem_newCodeActionPerformed(evt);
            }
        });
        menu_file.add(menuItem_newCode);

        menuItem_openFile.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        menuItem_openFile.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Compiler/images/openSrcCd.png"))); // NOI18N
        menuItem_openFile.setText("Open Source Code");
        menuItem_openFile.setEnabled(false);
        menuItem_openFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItem_openFileActionPerformed(evt);
            }
        });
        menu_file.add(menuItem_openFile);

        menuItem_SaveCode.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        menuItem_SaveCode.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Compiler/images/save.png"))); // NOI18N
        menuItem_SaveCode.setText("Save Source Code");
        menuItem_SaveCode.setEnabled(false);
        menuItem_SaveCode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItem_SaveCodeActionPerformed(evt);
            }
        });
        menu_file.add(menuItem_SaveCode);

        menuItemSaveAsCode.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        menuItemSaveAsCode.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Compiler/images/saveAs.png"))); // NOI18N
        menuItemSaveAsCode.setText("Save As Source Code");
        menuItemSaveAsCode.setEnabled(false);
        menuItemSaveAsCode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemSaveAsCodeActionPerformed(evt);
            }
        });
        menu_file.add(menuItemSaveAsCode);
        menu_file.add(jSeparator2);

        menuItem_exit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        menuItem_exit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Compiler/images/exit.png"))); // NOI18N
        menuItem_exit.setText("Exit");
        menuItem_exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItem_exitActionPerformed(evt);
            }
        });
        menu_file.add(menuItem_exit);

        menuBar.add(menu_file);

        menu_edit.setText("Edit");
        menuBar.add(menu_edit);

        menu_compile.setText("Compile");
        menu_compile.setEnabled(false);

        menuItem_Compile.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F9, java.awt.event.InputEvent.CTRL_MASK));
        menuItem_Compile.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Compiler/images/compileStatus/2_compiled.png"))); // NOI18N
        menuItem_Compile.setText("Compile");
        menuItem_Compile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItem_CompileActionPerformed(evt);
            }
        });
        menu_compile.add(menuItem_Compile);
        menu_compile.add(jSeparator7);

        menuItem_compile_record.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_MASK));
        menuItem_compile_record.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Compiler/images/record.png"))); // NOI18N
        menuItem_compile_record.setText("Start Recording");
        menuItem_compile_record.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItem_compile_recordActionPerformed(evt);
            }
        });
        menu_compile.add(menuItem_compile_record);

        menuItem_compile_resume.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Compiler/images/play.png"))); // NOI18N
        menuItem_compile_resume.setText("Resume");
        menuItem_compile_resume.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItem_compile_resumeActionPerformed(evt);
            }
        });
        menu_compile.add(menuItem_compile_resume);

        menuItem_compile_pause.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Compiler/images/pause.png"))); // NOI18N
        menuItem_compile_pause.setText("Pause");
        menuItem_compile_pause.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItem_compile_pauseActionPerformed(evt);
            }
        });
        menu_compile.add(menuItem_compile_pause);

        menuItem_compile_stop.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Compiler/images/stop.png"))); // NOI18N
        menuItem_compile_stop.setText("Stop");
        menuItem_compile_stop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItem_compile_stopActionPerformed(evt);
            }
        });
        menu_compile.add(menuItem_compile_stop);

        menuItem_compile_saveStat.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Compiler/images/saveStat.png"))); // NOI18N
        menuItem_compile_saveStat.setText("Save Performance Data");
        menuItem_compile_saveStat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItem_compile_saveStatActionPerformed(evt);
            }
        });
        menu_compile.add(menuItem_compile_saveStat);

        menuItem_compile_StatStudio.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Compiler/images/catStatStd.png"))); // NOI18N
        menuItem_compile_StatStudio.setText("Open CAT Statistic Studio");
        menuItem_compile_StatStudio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItem_compile_StatStudioActionPerformed(evt);
            }
        });
        menu_compile.add(menuItem_compile_StatStudio);

        menuBar.add(menu_compile);

        menu_env.setText("Environment");

        menuItem_env_sysProp.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Compiler/images/sysInfo.png"))); // NOI18N
        menuItem_env_sysProp.setText("System Information");
        menuItem_env_sysProp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItem_env_sysPropActionPerformed(evt);
            }
        });
        menu_env.add(menuItem_env_sysProp);

        menuBar.add(menu_env);

        menu_help.setText("Help");

        help_feedback.setIcon(new javax.swing.ImageIcon(getClass().getResource("/commanLib/images/feedback.png"))); // NOI18N
        help_feedback.setText("Send a Feedback Mail");
        help_feedback.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                help_feedbackActionPerformed(evt);
            }
        });
        menu_help.add(help_feedback);

        jMenuItem2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/commanLib/images/about.png"))); // NOI18N
        jMenuItem2.setText("About");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        menu_help.add(jMenuItem2);

        menuBar.add(menu_help);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(toolBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(statusPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tabbedPaneMAIN)
                    .addComponent(jScrollPane4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tabPane_symbl, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(toolBar, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(tabbedPaneMAIN)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(tabPane_symbl))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(statusPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void menuItem_openFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItem_openFileActionPerformed
        // TODO add your handling code here:
        openSourceCodeBtnAction();
    }//GEN-LAST:event_menuItem_openFileActionPerformed

    private void menuItem_exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItem_exitActionPerformed
        // TODO add your handling code here:
        System.exit(0);   //TO CHANGE
    }//GEN-LAST:event_menuItem_exitActionPerformed

    private void menuItem_CompileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItem_CompileActionPerformed
        // TODO add your handling code here:
        
        compileSourceCodeBtnAction();
        /*
        Dialog_Compile d = new Dialog_Compile(this, true, cmMdlData, textA_scrCd, table_symTb,this);
        
        menuItem_SaveReport.setEnabled(true);
        setEnableMainTabbed(true);
        * 
        */
    }//GEN-LAST:event_menuItem_CompileActionPerformed

    private void menuItem_LdMdlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItem_LdMdlActionPerformed
        // TODO add your handling code here:
        loadModel();       
    }//GEN-LAST:event_menuItem_LdMdlActionPerformed

    private void menuItem_SaveCodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItem_SaveCodeActionPerformed
        // TODO add your handling code here:        
        saveSourceCodeBtnAction();                
    }//GEN-LAST:event_menuItem_SaveCodeActionPerformed

    private void menuItemSaveAsCodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemSaveAsCodeActionPerformed
        // TODO add your handling code here:
        saveAsSourceCodeBtnAction();
    }//GEN-LAST:event_menuItemSaveAsCodeActionPerformed

    private void menuItem_propertiesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItem_propertiesActionPerformed
        // TODO add your handling code here:
        Dialog_properties d = new Dialog_properties(this, true, mdlPath, cmMdlData);
    }//GEN-LAST:event_menuItem_propertiesActionPerformed

    private void textA_scrCdCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_textA_scrCdCaretUpdate
        // TODO add your handling code here:
        try{
            int dot=evt.getDot();
            int mark=evt.getMark();
            
            if(dot==mark)
            {
                int caretPos = textA_scrCd.getCaretPosition(); 
                int lineNo=textA_scrCd.getLineOfOffset(caretPos);
                int colNo= caretPos - textA_scrCd.getLineStartOffset(lineNo);
                lbl_curLoc.setText("Caret Location : ["+(lineNo+1)+":"+colNo+"]");  
                
                //set caret on lexical textA                                                 
            }
            else
            { 
                lbl_curLoc.setText(Math.abs((mark-dot))+" Characters Selected!");
            }
            
        }catch(Exception e)
        {}
    }//GEN-LAST:event_textA_scrCdCaretUpdate

    private void menuItem_newCodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItem_newCodeActionPerformed
        // TODO add your handling code here:
        createNewSourceCodeBtnAction();        
    }//GEN-LAST:event_menuItem_newCodeActionPerformed

    private void btn_symTb_srchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_symTb_srchActionPerformed
        // TODO add your handling code here:
        String str=textF_symTb_srchStr.getText();
        int col=0,row=-1;
        if(radioBtn_symTb_Lxm.isSelected())
        { col=0; }
        else
        { col=1; }
        
        for(int i=0;i<table_symTb.getRowCount();i++)
        {
            if( String.valueOf(table_symTb.getValueAt(i, col)).equals(str) )
            {
                row=i; break;
            }
        }
        
        if(row!=-1)
        { 
            textF_symTb_srchStr.setForeground(Color.black);
            table_symTb.setRowSelectionInterval(row, row); 
            table_symTb.scrollRectToVisible(new Rectangle(table_symTb.getCellRect(row, 0, true)));
        }
        else
        {
            textF_symTb_srchStr.setForeground(Color.red);
        }
    }//GEN-LAST:event_btn_symTb_srchActionPerformed

    private void textF_symTb_srchStrKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textF_symTb_srchStrKeyTyped
        // TODO add your handling code here:
        textF_symTb_srchStr.setForeground(Color.black);
    }//GEN-LAST:event_textF_symTb_srchStrKeyTyped

    private void btn_toolbar_LdMdlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_toolbar_LdMdlActionPerformed
        // TODO add your handling code here:
        loadModel();
    }//GEN-LAST:event_btn_toolbar_LdMdlActionPerformed

    private void btn_toolbar_compileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_toolbar_compileActionPerformed
        // TODO add your handling code here:
        compileSourceCodeBtnAction();
    }//GEN-LAST:event_btn_toolbar_compileActionPerformed

    private void table_errorsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_table_errorsMouseClicked
        // TODO add your handling code here:
        try{
            int row=table_errors.getSelectedRow();
            String str=String.valueOf(table_errors.getValueAt(row, 2));
            StringTokenizer st = new StringTokenizer(str, "[,]");            
            int line=Integer.parseInt(st.nextToken());                        
            int caret=Integer.parseInt(st.nextToken());                        
            Element root = textA_scrCd.getDocument().getDefaultRootElement();
            line = Math.max(line, 1);
	    line = Math.min(line, root.getElementCount());
            
	    textA_scrCd.setCaretPosition( (root.getElement( line - 1 ).getStartOffset()+caret) );                        
            
                
        }catch(Exception e)
        {
            System.out.println(e);
        }
        
        
        
        
    }//GEN-LAST:event_table_errorsMouseClicked

    private void btn_toolbar_NewSrcActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_toolbar_NewSrcActionPerformed
        // TODO add your handling code here:
        createNewSourceCodeBtnAction();
    }//GEN-LAST:event_btn_toolbar_NewSrcActionPerformed

    private void btn_toolbar_openSrcActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_toolbar_openSrcActionPerformed
        // TODO add your handling code here:
        openSourceCodeBtnAction();
    }//GEN-LAST:event_btn_toolbar_openSrcActionPerformed

    private void btn_toolbar_saveSrcActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_toolbar_saveSrcActionPerformed
        // TODO add your handling code here:
        saveSourceCodeBtnAction();
    }//GEN-LAST:event_btn_toolbar_saveSrcActionPerformed

    private void menuItem_env_sysPropActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItem_env_sysPropActionPerformed
        // TODO add your handling code here:
        Dialog_SystemInfo d = new Dialog_SystemInfo(this, true,systemProp);
        d.setVisible(true);
    }//GEN-LAST:event_menuItem_env_sysPropActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
        Dialog_Compiler_About d=new Dialog_Compiler_About(this, true);
        //d.getData(CNF.firstName+" "+CNF.lastName, CNF.company);
        d.setVisible(true);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void menuItem_compile_pauseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItem_compile_pauseActionPerformed
        // TODO add your handling code here:
        statisticControlPanel(PAUSE);
    }//GEN-LAST:event_menuItem_compile_pauseActionPerformed

    private void menuItem_compile_StatStudioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItem_compile_StatStudioActionPerformed
        // TODO add your handling code here:
        openCATStatStudio();
    }//GEN-LAST:event_menuItem_compile_StatStudioActionPerformed

    private void menuItem_compile_resumeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItem_compile_resumeActionPerformed
        // TODO add your handling code here:
        statisticControlPanel(RESUME);
    }//GEN-LAST:event_menuItem_compile_resumeActionPerformed

    private void btn_toolbar_recordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_toolbar_recordActionPerformed
        // TODO add your handling code here:
        statisticControlPanel(RECORD);
        
    }//GEN-LAST:event_btn_toolbar_recordActionPerformed

    private void btn_toolbar_resumeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_toolbar_resumeActionPerformed
        // TODO add your handling code here:
        statisticControlPanel(RESUME);
    }//GEN-LAST:event_btn_toolbar_resumeActionPerformed

    private void btn_toolbar_pauseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_toolbar_pauseActionPerformed
        // TODO add your handling code here:
        statisticControlPanel(PAUSE);
    }//GEN-LAST:event_btn_toolbar_pauseActionPerformed

    private void btn_toolbar_stopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_toolbar_stopActionPerformed
        // TODO add your handling code here:
        statisticControlPanel(STOP);
    }//GEN-LAST:event_btn_toolbar_stopActionPerformed

    private void menuItem_compile_recordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItem_compile_recordActionPerformed
        // TODO add your handling code here:
        statisticControlPanel(RECORD);
    }//GEN-LAST:event_menuItem_compile_recordActionPerformed

    private void menuItem_compile_stopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItem_compile_stopActionPerformed
        // TODO add your handling code here:
        statisticControlPanel(STOP);
    }//GEN-LAST:event_menuItem_compile_stopActionPerformed

    private void btn_toolbar_StatStudioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_toolbar_StatStudioActionPerformed
        // TODO add your handling code here:
        openCATStatStudio();
    }//GEN-LAST:event_btn_toolbar_StatStudioActionPerformed

    private void btn_toolBar_saveStatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_toolBar_saveStatActionPerformed
        // TODO add your handling code here:        
       saveStatDataToFile();    
    }//GEN-LAST:event_btn_toolBar_saveStatActionPerformed

    private void menuItem_compile_saveStatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItem_compile_saveStatActionPerformed
        // TODO add your handling code here:
        saveStatDataToFile();
    }//GEN-LAST:event_menuItem_compile_saveStatActionPerformed

    private void help_feedbackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_help_feedbackActionPerformed
        // TODO add your handling code here:
        CATFeedback frame = new CATFeedback();
        frame.setVisible(true);
    }//GEN-LAST:event_help_feedbackActionPerformed

    private void textA_scrCdKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textA_scrCdKeyTyped
        // TODO add your handling code here:
        savedSrcCd=false;
    }//GEN-LAST:event_textA_scrCdKeyTyped

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CATCompiler.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CATCompiler.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CATCompiler.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CATCompiler.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() 
            {                
                    new CATCompiler().setVisible(true);                
            }
        });
    }
   
    //-----------my methods
    
    private void loadModel()
    {   
        if(statData!=null)
        {
            if(!statData.isEmpty() && (statisticFlag!=-1 || statisticFlag!=STOP) )
            {
                System.out.println("Asking to save Performance data...!!! Complete this part!");                      
            }
            
        }
        
        
        setStatusMesg("Loading Model...", -1);        
        if(fileChooserModel.showOpenDialog(this)== JFileChooser.APPROVE_OPTION)   //approve button clicked
       {                                     
          String path="";
          path=fileChooserModel.getSelectedFile().getAbsolutePath();
          if(chkFileExt(path))
          {   
              try
              {
                  ModelData model=ModelData.readData(path);                                    
                  
                  //warn for empty models
                  if(model.retEmptyModelList().size()!=0)
                  {     
                      /*
                      JOptionPane optionPane = new JOptionPane();         
                      JList lst = new JList(model.retEmptyModelList());
                      lst.setSelectionMode(0);            
                      optionPane.setMessage(new Object[] { "Warning!\nThe following models have not been implemented.\nDo you wish to continue loading ?", lst });
                      optionPane.setMessageType(JOptionPane.WARNING_MESSAGE);
                      optionPane.setOptionType(JOptionPane.YES_NO_OPTION);
                      JDialog dialog = optionPane.createDialog(this, "Warning! Empty Models!");
                      dialog.setVisible(true);    
                      */
                      JOptionPane optionPane = new JOptionPane();         
                      JList lst = new JList(model.retEmptyModelList());
                      lst.setSelectionMode(0);  
                      JScrollPane scrollPn_lst = new JScrollPane();
                      scrollPn_lst.setPreferredSize(new java.awt.Dimension(100,100));
                      scrollPn_lst.setViewportView(lst);
            
                      optionPane.setMessage(new Object[] { "Warning!\nThe following models have not been implemented.\nDo you wish to continue loading ?", scrollPn_lst });
                      optionPane.setMessageType(JOptionPane.WARNING_MESSAGE);
                      optionPane.setOptionType(JOptionPane.YES_NO_OPTION);
                      JDialog dialog = optionPane.createDialog(this, "Warning! Empty Models!");
                      dialog.setVisible(true);  
            
                      int sel;
                      try
                      { sel =(Integer)optionPane.getValue(); }
                      catch(Exception e)
                      { sel=-1; }
            
                      if(sel!=0)  //not yes
                      { return; }
                  }
                  
                  cmMdlData = new CompilerModelData(model); 
                  String ex[]=cmMdlData.getExtensions();
                  fileChooserCode.resetChoosableFileFilters();
                  for(String i : ex)
                  {
                      fileChooserCode.addChoosableFileFilter(new CompilerTextFilter(i));
                  }
                  
                  setEnableMenuItems(true);
                                    
                  mdlPath=path;
                  mdlExts=ex;                  
                  setTitle("Compiler Automation Tool â€“ Compiler | ["+mdlPath+"]");
                  if(srcCdPath.equals(""))
                  { tabbedPaneMAIN.setTitleAt(0, "Source Code (Untitled)"); }
                  
                  statData = new StatisticData(model,mdlPath,systemProp); 
                  resetStatisticButtons(false);
                  
                  setStatusMesg("Loading Model...Done!", 0);
                  
              }
              catch(InvalidClassException ice)
              {
                  setStatusMesg("Loading Model...Error!", 0);
                  Dialog_ExceptionHandler.autoPopMessageJOptionPane(this, "Error reading model file...", "An error occurred while reading model file.", "Either the file is corrupted or you are using\nobsolete model file version.", JOptionPane.ERROR_MESSAGE);
              }              
              catch(Exception e)
              { 
                  //System.out.println("***"+e+"***");
                  //e.printStackTrace();
                  //JOptionPane.showMessageDialog(this, "Error Reading Model File!\n"+e, "Error reading File...", JOptionPane.ERROR_MESSAGE);                                    
                  setStatusMesg("Loading Model...Error!", 0);
                  Dialog_ExceptionHandler.autoPopJOptionPane(this, "Error reading File...", "Error Reading Model File!", e, JOptionPane.ERROR_MESSAGE);
              }
                            
          }
          else
          {              
              JOptionPane.showMessageDialog(this, "File Not Supported!", "Error reading File...", JOptionPane.ERROR_MESSAGE);
              setStatusMesg("Loading Model...Error!", 0);
          }
        }
        else
        {
            setStatusMesg("Loading Model...Aborted", 0);
        }
    }
    
    private void createNewSourceCodeBtnAction()
    {
        if(!srcCdPath.equals("") || !textA_scrCd.getText().equals(""))
        {
            int response=JOptionPane.showConfirmDialog(this, "Save current Source Code ?", "New Source Code...", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);
            
            if(response==JOptionPane.YES_OPTION)
            {
                //save
                String ext="",path="";
                if(srcCdPath.equals(""))
                {
                    int fileChosRes=fileChooserCode.showSaveDialog(this);
                    if(fileChosRes==JFileChooser.APPROVE_OPTION)
                    {
                        File codefile = fileChooserCode.getSelectedFile();
                        ext="."+fileChooserCode.getFileFilter().toString();
                        path=codefile.getAbsolutePath()+ext;
                        if(saveSourceCode(path))
                        { tabbedPaneMAIN.setTitleAt(0, "Source Code ("+codefile.getName()+ext+")"); }                
                    }
                    else if(fileChosRes==JFileChooser.CANCEL_OPTION)
                    { return; }
                }
                else
                { saveSourceCode(srcCdPath); }
                
                //clear
                textA_scrCd.setText("");
                srcCdPath="";
                tabbedPaneMAIN.setTitleAt(0, "Source Code (Untitled)");
                lbl_ScrPath.setText("");
                savedSrcCd=false;
            }
            else if(response==JOptionPane.NO_OPTION)
            {
                textA_scrCd.setText("");
                srcCdPath="";
                tabbedPaneMAIN.setTitleAt(0, "Source Code (Untitled)");
                lbl_ScrPath.setText("");
                savedSrcCd=false;
            }
            
        }
    }
    
    private void openSourceCodeBtnAction()
    {
        if(!srcCdPath.equals("") || !textA_scrCd.getText().equals(""))
        {
            int response=JOptionPane.showConfirmDialog(this, "Save current Source Code ?", "Open Source Code...", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);
            if(response==JOptionPane.YES_OPTION)
            {
                
                String ext="",path="";
                if(srcCdPath.equals(""))
                {
                    if(fileChooserCode.showSaveDialog(this)==JFileChooser.APPROVE_OPTION)
                    {
                        File codefile = fileChooserCode.getSelectedFile();
                        ext="."+fileChooserCode.getFileFilter().toString();
                        path=codefile.getAbsolutePath()+ext;
                        if(saveSourceCode(path))
                        { tabbedPaneMAIN.setTitleAt(0, "Source Code ("+codefile.getName()+ext+")"); }                
                    }            
                }
                else
                { saveSourceCode(srcCdPath); }                
                
            }
            else if(response==JOptionPane.CANCEL_OPTION || response==JOptionPane.CLOSED_OPTION)
            {
               return;
            }
        } 
        
        if(fileChooserCode.showOpenDialog(this)== JFileChooser.APPROVE_OPTION) 
        {   
            File f=fileChooserCode.getSelectedFile();            
            String path=f.getAbsolutePath();
            setStatusMesg("Reading Souce Code...", -1);
            Dialog_OpenSrcCd d = new Dialog_OpenSrcCd(this, true,textA_scrCd, path);                       
            if(d.success)
            {
                setStatusMesg("Opening Souce Code...Done!", 0);
                srcCdPath=path;
                lbl_ScrPath.setText(srcCdPath);
                textA_scrCd.setCaretPosition(0);
                tabbedPaneMAIN.setTitleAt(0, "Source Code ("+f.getName()+")");
                //srcCdLOC=calculateLOC();
                savedSrcCd=true;
            }
            else
            {
                setStatusMesg("Reading Souce Code...Aborted!", 0);
            }
                
            
        }
    }
    
    private void compileSourceCodeBtnAction()
    {
        if(textA_scrCd.getText().equals(""))
        { return; }
        
        setStatusMesg("Compiling...", -1);
        
        //chk if it is saved 
        if(!savedSrcCd)
        {
            int response=JOptionPane.showConfirmDialog(this, "Do you want to save before compiling ?", "Save Source Code...", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if(response==JOptionPane.YES_OPTION)
            { saveSourceCodeBtnAction(); }
        }
        try
        {
            int loc=calculateLOC();
            Dialog_Compile d = new Dialog_Compile(this, true, cmMdlData, textA_scrCd, table_symTb,this);
            PerformRecord temp= d.retPerformRecord();
            //System.out.println(temp.toString());
            
            if(statisticFlag==RECORD || statisticFlag==RESUME)
            {
                String path;
                if(srcCdPath.equals(""))
                { path="Untitled"; }
                else
                {                    
                    path=srcCdPath; 
                    if(!savedSrcCd)
                    { path+=" (Unsaved)"; }
                }
                
                statData.addNewRecord(new PerformRecord(loc,path, temp.lexiclTime, temp.totalTime));
                setCompileMesage("Compilation statistic recorded!",0);
            }
        
            //setStatusMesg("Compiling...Done!", 0);
            menuItem_compile_record.setEnabled(true);
            setEnableMainTabbed(true);
            
        }catch(Throwable e)
        { System.out.println(e); }
    }
    
    private void saveSourceCodeBtnAction()
    {
        String ext="",path="";
        if(srcCdPath.equals(""))
        {
            if(fileChooserCode.showSaveDialog(this)==JFileChooser.APPROVE_OPTION)
            {
                File codefile = fileChooserCode.getSelectedFile();
                ext=fileChooserCode.getFileFilter().toString();
                path=correctFileExtention(codefile.getAbsolutePath(),ext);
                if(saveSourceCode(path))
                { tabbedPaneMAIN.setTitleAt(0, "Source Code ("+correctFileExtention(codefile.getName(), ext) +")"); }
                
            }            
        }
        else
        { saveSourceCode(srcCdPath); }
    }
    
    private String correctFileExtention(String absPath,String ext)
    {
        String retPath="",ex="";
        try
        {
            StringTokenizer st =new StringTokenizer(absPath,".");
            retPath=st.nextToken();
            ex=st.nextToken();
            
            if(!ex.equals(ext))
            { 
                retPath+="."+ext;
            }
            else
            { retPath=absPath; }
            
            
        }catch(Exception e)
        { retPath=absPath+"."+ext; }
        
        return retPath;
    }
    
    private void saveAsSourceCodeBtnAction()
    {
        String path="";
        if(fileChooserCode.showSaveDialog(this)==JFileChooser.APPROVE_OPTION)
        {
                File codefile = fileChooserCode.getSelectedFile();
                String ext=fileChooserCode.getFileFilter().toString();
                path=correctFileExtention(codefile.getAbsolutePath(),ext);
                
                if(saveSourceCode(path))
                { tabbedPaneMAIN.setTitleAt(0, "Source Code ("+correctFileExtention(codefile.getName(), ext) +")"); }                
        }
    }
    
    private boolean saveSourceCode(String path)
    {
        boolean flag=false;
        
        try
        {           
            BufferedWriter fout = new BufferedWriter(new FileWriter(new File(path)));
            textA_scrCd.write(fout);
            srcCdPath=path;
            lbl_ScrPath.setText(srcCdPath);
            flag=true;
            fout.close();
            savedSrcCd=true;            
            
        }catch(Exception e)
        { 
            flag=false; 
            savedSrcCd=false;
            JOptionPane.showMessageDialog(this, e.getMessage(), "Error Saving...", JOptionPane.ERROR_MESSAGE);            
        }
                
        return flag;
        
    }
    
    private void setEnableMainTabbed(boolean value)
    {
        for(int i=1;i<tabbedPaneMAIN.getTabCount();i++)
        { tabbedPaneMAIN.setEnabledAt(i, value); }
    }
    
    private void setEnableMenuItems(boolean value)
    {
        //file
        menuItem_properties.setEnabled(value);
        menuItem_newCode.setEnabled(value);
        menuItem_openFile.setEnabled(value);
        menuItem_SaveCode.setEnabled(value);
        menuItemSaveAsCode.setEnabled(value);
        
        //toolbar
        btn_toolbar_NewSrc.setEnabled(value);
        btn_toolbar_openSrc.setEnabled(value);
        btn_toolbar_saveSrc.setEnabled(value);
        btn_toolbar_compile.setEnabled(value);
        
        //menu_Mdl.setEnabled(value);
        
        menu_compile.setEnabled(value);
    }
    
    private boolean chkFileExt(String path)
    {
        boolean flag=true;
        String p="",ext="";
        StringTokenizer st =new StringTokenizer(path,".");
        
        try
        {               
            p=st.nextToken();
            ext=st.nextToken();                          
               
            if(!ext.equals("mdc"))                   
            { flag=false; }
               
        }catch(NoSuchElementException no)
        { flag=false; }
        
        return flag;
    }
    
    public static void setStatusMesg(String stMsg,int bar)
    {       
        if(stMsg!=null)
        {            
            statusMsg.setText(stMsg);
        }
        
       
        if(bar==-1)
        {
            progrsBar.setIndeterminate(true);
        }
        else if(bar==100)
        {   
            progrsBar.setIndeterminate(false);
            //statusMsg.setText("");
            progrsBar.setValue(0);
        }        
        else
        {
            progrsBar.setIndeterminate(false);
            //progrsBar.setVisible(true);
            progrsBar.setValue(bar);
        }
    }
    
    public void setCompileMesage(String message,int msgType)
    {        
            SimpleDateFormat sdf = new SimpleDateFormat("HH:mm:ss:SS");
            String time = sdf.format(new Date());
            ImageIcon icon = null;
           
            
            switch(msgType)
            {
                case -2 : icon = new ImageIcon(getClass().getResource("/Compiler/images/compileStatus/-2_Abort.png"));  break;
                case -1 : icon = new ImageIcon(getClass().getResource("/Compiler/images/compileStatus/-1_Error.png"));  break;
                case 0 : icon = new ImageIcon(getClass().getResource("/Compiler/images/compileStatus/0_msg.png"));  break;
                case 1 : icon = new ImageIcon(getClass().getResource("/Compiler/images/compileStatus/1_ok.png"));  break;
                case 2 : icon = new ImageIcon(getClass().getResource("/Compiler/images/compileStatus/2_compiled.png"));  time=""; break;          
            }
            
            
            Object ob[]= new Object[]{icon,time,message};
            DefaultTableModel tbMd = (DefaultTableModel)table_msg.getModel();
            tbMd.insertRow(table_msg.getRowCount(), ob);
    }
    
    public static void resetCompileMsgTable()
    {
        DefaultTableModel model=(DefaultTableModel)table_msg.getModel();
        for( int i = model.getRowCount() - 1; i >= 0; i-- )
        {   
            model.removeRow(i);
        }
    }
    
    private void statisticControlPanel(int cmd)
    {
        switch(cmd)
        {
            case RECORD : {
                               if(!statData.isEmpty())
                               {
                                   int result=JOptionPane.showOptionDialog(this, "There exist previous unsaved performance data.\nWhat do you want to do ?", "Performance Data", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null,new String[]{"Save","View","Reset"},null);              
                                   if(result==JOptionPane.YES_OPTION)  //Save
                                   { saveStatDataToFile(); }
                                   else if(result==JOptionPane.NO_OPTION)  //View
                                   { openCATStatStudio(); }                                   
                               }
                               
                               statData.resetData();
                               statisticFlag=RECORD;
                               
                               btn_toolbar_record.setEnabled(false);
                               menuItem_compile_record.setEnabled(false);
                       
                               btn_toolbar_resume.setEnabled(false);
                               menuItem_compile_resume.setEnabled(false);
       
                               btn_toolbar_pause.setEnabled(true);
                               menuItem_compile_pause.setEnabled(true);
       
                               btn_toolbar_stop.setEnabled(true);
                               menuItem_compile_stop.setEnabled(true);
                               
                               btn_toolBar_saveStat.setEnabled(true);
                               menuItem_compile_saveStat.setEnabled(true);
            
                               btn_toolbar_StatStudio.setEnabled(true);
                               menuItem_compile_StatStudio.setEnabled(true);
                               setStatusMesg("Recording...", -1);
            
                          }break;
            case RESUME : {
                               statisticFlag=RESUME; 
                               btn_toolbar_resume.setEnabled(false);
                               menuItem_compile_resume.setEnabled(false);
       
                               btn_toolbar_pause.setEnabled(true);
                               menuItem_compile_pause.setEnabled(true);
                               setStatusMesg("Resumed! Recording...", -1);
       
                          }break;
             case PAUSE : {     
                               statisticFlag=PAUSE;
                               btn_toolbar_resume.setEnabled(true);
                               menuItem_compile_resume.setEnabled(true);
       
                               btn_toolbar_pause.setEnabled(false);
                               menuItem_compile_pause.setEnabled(false);
                               setStatusMesg("Paused!", 0);
       
                          }break;
             case STOP : {
                               statisticFlag=STOP;
                               
                               if(!statData.isEmpty())
                               {
                                   int result=JOptionPane.showOptionDialog(this, "Do you want to save or view performance data ?", "Performance Data", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null,new String[]{"Save","View","Cancel"},null);              
                                   if(result==JOptionPane.YES_OPTION)  //Save
                                   { 
                                       saveStatDataToFile(); 
                                       statData.resetData();
                                   }
                                   else if(result==JOptionPane.NO_OPTION)  //View
                                   { openCATStatStudio(); }
                               }
                               
                               btn_toolbar_record.setEnabled(true);
                               menuItem_compile_record.setEnabled(true);
                       
                               btn_toolbar_resume.setEnabled(false);
                               menuItem_compile_resume.setEnabled(false);
       
                               btn_toolbar_pause.setEnabled(false);
                               menuItem_compile_pause.setEnabled(false);
       
                               btn_toolbar_stop.setEnabled(false);
                               menuItem_compile_stop.setEnabled(false);      
                               setStatusMesg("Stoped!", 0);
                          }break;
        }
       
    }
    
    private void resetStatisticButtons(boolean all)
    {
        if(all)
        {
            btn_toolbar_record.setEnabled(false);
            menuItem_compile_record.setEnabled(false);           
            
        }else
        {
            btn_toolbar_record.setEnabled(true);
            menuItem_compile_record.setEnabled(true);       
            /*
            btn_toolBar_saveStat.setEnabled(true);
            menuItem_compile_saveStat.setEnabled(true);
            
            btn_toolbar_StatStudio.setEnabled(true);
            menuItem_compile_StatStudio.setEnabled(true);
            */
        }
        
            btn_toolBar_saveStat.setEnabled(false);
            menuItem_compile_saveStat.setEnabled(false);
            
            btn_toolbar_StatStudio.setEnabled(false);
            menuItem_compile_StatStudio.setEnabled(false);        
        
        btn_toolbar_resume.setEnabled(false);
        menuItem_compile_resume.setEnabled(false);
       
        btn_toolbar_pause.setEnabled(false);
        menuItem_compile_pause.setEnabled(false);
       
        btn_toolbar_stop.setEnabled(false);
        menuItem_compile_stop.setEnabled(false);                
                        
    }
    
    private int calculateLOC()
    {   
        String code = textA_scrCd.getText();        
        if(!code.equals(""))
        {
            int ctr=1;
            for(int i=0;i<code.length();i++)
            {
                if(code.charAt(i)=='\n' || code.charAt(i)=='\r' )
                { ctr++; }
            }
            
            return (ctr);
        }else
        { return -1; }
        
    }
    
    private void openCATStatStudio()
    {
        if(statData.isEmpty())
        {
            JOptionPane.showMessageDialog(this, "Access Denied! No Performance Data in Record List!","Empty Record List!", JOptionPane.WARNING_MESSAGE);
        }
        else
        {
            if(statStdioFrame==null)
            {  statStdioFrame= new CATStatStudio(statData);  }
            else
            { statStdioFrame.loadStatData(statData); }
            
            statStdioFrame.setVisible(true);
        }
            
    }
    
    private boolean saveStatDataToFile()
    {   
        if(statData.isEmpty())
        {
            JOptionPane.showMessageDialog(this, "Access Denied! No Performance Data in Record List!","Empty Record List!", JOptionPane.WARNING_MESSAGE);
            return false;
        }
        
        String path="";
        boolean flag=true;
        
            if(fileChooserStat.showSaveDialog(this)== JFileChooser.APPROVE_OPTION)   //approve button clicked
            {
                path=fileChooserStat.getSelectedFile().getAbsolutePath();                                
                
                //path=insertFileExt(path);  //add extension
                String p="",ext="";
                try
                {               
                    StringTokenizer st =new StringTokenizer(path,".");
                       p=st.nextToken();
                       ext=st.nextToken();                          
               
                   if(!ext.equals(CatFileExtensions.STAT_FILE_EXT))                   
                   { path=p+"."+CatFileExtensions.STAT_FILE_EXT; }
               
                }catch(NoSuchElementException no)
                { path+="."+CatFileExtensions.STAT_FILE_EXT; }
            }            
            else
            { flag=false; }        
    
        if(flag)
        {               
            try
            {
                StatisticData.writeToFile(statData, path);
            }catch(Exception e)
            {                 
                JOptionPane.showMessageDialog(this, "Error Saving File! Please check your path!", "Error Saving File!", JOptionPane.ERROR_MESSAGE);
            }            
            
            
        }
        
        return flag;
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup btnGp_symTb_srchCh;
    private javax.swing.JButton btn_symTb_srch;
    private javax.swing.JButton btn_toolBar_saveStat;
    private javax.swing.JButton btn_toolbar_LdMdl;
    private javax.swing.JButton btn_toolbar_NewSrc;
    private javax.swing.JButton btn_toolbar_StatStudio;
    private javax.swing.JButton btn_toolbar_compile;
    private javax.swing.JButton btn_toolbar_openSrc;
    private javax.swing.JButton btn_toolbar_pause;
    private javax.swing.JButton btn_toolbar_record;
    private javax.swing.JButton btn_toolbar_resume;
    private javax.swing.JButton btn_toolbar_saveSrc;
    private javax.swing.JButton btn_toolbar_stop;
    private javax.swing.JFileChooser fileChooserCode;
    private javax.swing.JFileChooser fileChooserModel;
    private javax.swing.JFileChooser fileChooserStat;
    private javax.swing.JMenuItem help_feedback;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JToolBar.Separator jSeparator4;
    private javax.swing.JToolBar.Separator jSeparator5;
    private javax.swing.JToolBar.Separator jSeparator6;
    private javax.swing.JPopupMenu.Separator jSeparator7;
    private javax.swing.JLabel lbl_ScrPath;
    private javax.swing.JLabel lbl_curLoc;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem menuItemSaveAsCode;
    private javax.swing.JMenuItem menuItem_Compile;
    private javax.swing.JMenuItem menuItem_LdMdl;
    private javax.swing.JMenuItem menuItem_SaveCode;
    private javax.swing.JMenuItem menuItem_compile_StatStudio;
    private javax.swing.JMenuItem menuItem_compile_pause;
    private javax.swing.JMenuItem menuItem_compile_record;
    private javax.swing.JMenuItem menuItem_compile_resume;
    private javax.swing.JMenuItem menuItem_compile_saveStat;
    private javax.swing.JMenuItem menuItem_compile_stop;
    private javax.swing.JMenuItem menuItem_env_sysProp;
    private javax.swing.JMenuItem menuItem_exit;
    private javax.swing.JMenuItem menuItem_newCode;
    private javax.swing.JMenuItem menuItem_openFile;
    private javax.swing.JMenuItem menuItem_properties;
    private javax.swing.JMenu menu_compile;
    private javax.swing.JMenu menu_edit;
    private javax.swing.JMenu menu_env;
    private javax.swing.JMenu menu_file;
    private javax.swing.JMenu menu_help;
    private javax.swing.JPanel panel1_SrcCd;
    private javax.swing.JPanel panel2_Lexical;
    private javax.swing.JPanel panel_SymTb;
    private static javax.swing.JProgressBar progrsBar;
    private javax.swing.JRadioButton radioBtn_symTb_Lxm;
    private javax.swing.JRadioButton radioBtn_symTb_tkn;
    private javax.swing.JScrollPane scrollPane_code;
    private javax.swing.JScrollPane scrollPane_tknStrm;
    private static javax.swing.JLabel statusMsg;
    private javax.swing.JPanel statusPanel;
    public javax.swing.JTabbedPane tabPane_symbl;
    private javax.swing.JTabbedPane tabbedPaneMAIN;
    public javax.swing.JTable table_errors;
    private static javax.swing.JTable table_msg;
    private javax.swing.JTable table_symTb;
    private javax.swing.JTextArea textA_scrCd;
    private javax.swing.JTextField textF_symTb_srchStr;
    public javax.swing.JTextPane textP_tknStrm;
    private javax.swing.JToolBar toolBar;
    // End of variables declaration//GEN-END:variables
 
}
class CompilerTextFilter extends javax.swing.filechooser.FileFilter 
{
    private String extn="";

    public CompilerTextFilter(String ext) 
    {
        extn=ext;
    }
    

  public boolean accept(File f) {
    if (f.isDirectory())
      return true;
    String s = f.getName();
    int i = s.lastIndexOf('.');

    if (i > 0 && i < s.length() - 1)
      if (s.substring(i + 1).toLowerCase().equals(extn))
        return true;

    return false;
  }

  public String toString()
  {
      return extn;
  }
  
  public String getDescription() {
    return "*."+extn;
  }
}


class CpuSigarThread extends Thread
{
    JProgressBar progBar=null;
    Sigar session = null;
    CpuPerc cpuPerc = null;
    double freeCpu = 0;
    
    CpuSigarThread(JProgressBar pb) throws Exception
    {
        session = new Sigar();
        progBar=pb;
        start();        
    }
    
    public void run()
    {
        while(true)
        {
            try {
                  session = new Sigar();
                  cpuPerc = session.getCpuPerc();
                  freeCpu = cpuPerc.getIdle()*100;
                  progBar.setValue( (int) (100-freeCpu)  );                   
            }catch (SigarException e)
            { }             
        }
                      
        
    }
    
}