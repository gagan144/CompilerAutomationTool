package commanLib;

import java.awt.Color;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.channels.FileChannel;
import java.util.Calendar;
import java.util.StringTokenizer;
import javax.swing.JCheckBox;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;

public class Dialog_CollectForOutput extends javax.swing.JDialog 
{
    private String dirPath="";
    private final String statFilePath;
    private final StatisticData statisticData;
    private JCheckBox chkBx_list[] = new JCheckBox[4];
    
    private ProcessThread thread = null;
    private JTextArea textA=null;
    
    public Dialog_CollectForOutput(java.awt.Frame parent, boolean modal,StatisticData stData,String statFilePath) 
    {
        super(parent, modal);
        this.statFilePath=statFilePath;
        statisticData=stData;
        
        //delete
        //System.out.println("Model file path : "+statisticData.modelPath);
        //System.out.println("Statistic file path : "+statFilePath);
        
        initComponents();
               
        this.setLocationRelativeTo(null); 
        
        //GUI Initialization
        lbl_status.setVisible(false);
        progBar.setVisible(false);
        
        //variable initilization
        chkBx_list[0]=chkBox_model;
        chkBx_list[1]=chkBox_Stat;
        chkBx_list[2]=chkBox_srcCds;
        chkBx_list[3]=chkBox_pdf;
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileChooser_path = new javax.swing.JFileChooser();
        jLabel1 = new javax.swing.JLabel();
        btn_cancel = new javax.swing.JButton();
        btn_gen = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jTextArea1 = new javax.swing.JTextArea();
        progBar = new javax.swing.JProgressBar();
        lbl_status = new javax.swing.JLabel();
        panel_options = new javax.swing.JPanel();
        chkBox_model = new javax.swing.JCheckBox();
        chkBox_Stat = new javax.swing.JCheckBox();
        chkBox_pdf = new javax.swing.JCheckBox();
        chkBox_pdf_inclData = new javax.swing.JCheckBox();
        chkBox_srcCds = new javax.swing.JCheckBox();
        jButton1 = new javax.swing.JButton();
        textF_path = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();

        fileChooser_path.setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Collect For Output");
        setMaximumSize(null);
        setMinimumSize(null);
        setResizable(false);

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/commanLib/images/collectForOutput.png"))); // NOI18N
        jLabel1.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jLabel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jLabel1.setOpaque(true);

        btn_cancel.setText("Cancel");
        btn_cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_cancelActionPerformed(evt);
            }
        });

        btn_gen.setText("Generate");
        btn_gen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_genActionPerformed(evt);
            }
        });

        jTextArea1.setEditable(false);
        jTextArea1.setBackground(new java.awt.Color(240, 240, 240));
        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jTextArea1.setText("'Collect For Output' wizard allows you to gather all the relevant files related to your project into a single folder. Please select the files you wish to collect by selecting the available options :");
        jTextArea1.setWrapStyleWord(true);
        jTextArea1.setFocusable(false);
        jTextArea1.setOpaque(false);

        lbl_status.setText("status");

        chkBox_model.setSelected(true);
        chkBox_model.setText("Include Model File (.mdc)");

        chkBox_Stat.setSelected(true);
        chkBox_Stat.setText("Include Statistic File (.stc)");

        chkBox_pdf.setSelected(true);
        chkBox_pdf.setText("Include PDF File");
        chkBox_pdf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkBox_pdfActionPerformed(evt);
            }
        });

        chkBox_pdf_inclData.setText("Include Performance Data in pdf");
        chkBox_pdf_inclData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkBox_pdf_inclDataActionPerformed(evt);
            }
        });

        chkBox_srcCds.setText("Include all avaliable Source code files");

        jButton1.setText("Browse");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        textF_path.setEditable(false);

        jLabel2.setText("Path :");

        javax.swing.GroupLayout panel_optionsLayout = new javax.swing.GroupLayout(panel_options);
        panel_options.setLayout(panel_optionsLayout);
        panel_optionsLayout.setHorizontalGroup(
            panel_optionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel_optionsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panel_optionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel_optionsLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(panel_optionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panel_optionsLayout.createSequentialGroup()
                                .addGap(21, 21, 21)
                                .addComponent(chkBox_pdf_inclData))
                            .addComponent(chkBox_pdf)
                            .addComponent(chkBox_srcCds)
                            .addComponent(chkBox_Stat)
                            .addComponent(chkBox_model)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel_optionsLayout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(textF_path, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addContainerGap())
        );
        panel_optionsLayout.setVerticalGroup(
            panel_optionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_optionsLayout.createSequentialGroup()
                .addComponent(chkBox_model)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chkBox_Stat)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chkBox_srcCds)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chkBox_pdf, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chkBox_pdf_inclData)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(panel_optionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(textF_path, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextArea1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(panel_options, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(2, 2, 2))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 370, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbl_status, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 370, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(btn_gen, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btn_cancel, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(progBar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 370, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addComponent(jTextArea1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(panel_options, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lbl_status)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(progBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 5, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_cancel)
                    .addComponent(btn_gen))
                .addGap(12, 12, 12))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_cancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_cancelActionPerformed
        // TODO add your handling code here:
        if( btn_cancel.getText().startsWith("Cancel") )
        {
            if(thread==null)
            { 
                dispose(); 
                return;
            }
            try{
                thread.stop();
                thread=null;            
                
                textA.append("\nSTOPED!");
                lbl_status.setText("STOPPED");
                lbl_status.setForeground(Color.red);
            }catch(Exception e)
            {  System.out.println("Exception id Dialog_CollectForOutput : Cancel Button");  }
            
            btn_cancel.setText("Close");
        }
        else
        { dispose(); }
    }//GEN-LAST:event_btn_cancelActionPerformed

    private void chkBox_pdfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkBox_pdfActionPerformed
        // TODO add your handling code here:
        if(chkBox_pdf.isSelected())
        { chkBox_pdf_inclData.setEnabled(true); }
        else
        {
            chkBox_pdf_inclData.setSelected(false);
            chkBox_pdf_inclData.setEnabled(false);
        }
    }//GEN-LAST:event_chkBox_pdfActionPerformed

    private void chkBox_pdf_inclDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkBox_pdf_inclDataActionPerformed
        // TODO add your handling code here:
        if(chkBox_pdf_inclData.isSelected())
        { chkBox_pdf.setSelected(true); }
    }//GEN-LAST:event_chkBox_pdf_inclDataActionPerformed

    private void btn_genActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_genActionPerformed
        // TODO add your handling code here:
        String fileSep="";
        try{
            fileSep=System.getProperty("file.separator");
        }catch(Exception e)
        { fileSep="/"; }
        
        //Create new directory
        dirPath+=fileSep+"CATOutput";  //dirPath+="\\CATOutput";
        File destDir = new File(dirPath);
        if(!destDir.exists())
        {  destDir.mkdirs();    }          
        
        if(!chkAllChoices())
        { 
            JOptionPane.showMessageDialog(this, 
                      "Please make sure you have selected\n"
                    + "atleast one option and your path is\n"
                    + "valid directory!","Incomplete choice(s)...",JOptionPane.WARNING_MESSAGE);
            return;                
        }
        
        //reset panel
        panel_options.removeAll();        
        btn_gen.setEnabled(false);
        
        thread=new ProcessThread();
        
        /*
        //create textA
        JTextArea textA_sumry = new JTextArea();
        textA_sumry.setEditable(false);
        textA_sumry.setFont(new java.awt.Font("Tahoma", 0, 11));
        JScrollPane scrollPn_textA = new JScrollPane();        
        scrollPn_textA.setViewportView(textA_sumry);
        scrollPn_textA.setSize(365,panel_options.getSize().height-24); //scrollPn_textA.setSize(365, 156);
        panel_options.add(scrollPn_textA);        
        //panel_options.setSize(369, 191);
        //panel_options.validate();
        panel_options.repaint();
        
        //show progrss bar n lbl
        lbl_status.setVisible(true);
        progBar.setVisible(true);
        
        String sumryStr="";        
        boolean error=false;
        
              
        textA_sumry.append("Gathering files to \'"+dirPath+"\' ...\n");
        
        //get Model name
        String modelName=null;        
        StringTokenizer st = new StringTokenizer(new File(statisticData.modelPath).getName(), ".");
        if(st.hasMoreTokens())
        { modelName=st.nextToken(); }
        else
        { modelName=null; }
        
        //1. include model file
        if(chkBox_model.isSelected())
        {
            lbl_status.setText("Copying CAT Model File...");            
            try
            {
                File fileMdl = new File(statisticData.modelPath);
                textA_sumry.append("Copying "+fileMdl.getName()+" ...");                
                
                copyFile(fileMdl.getAbsolutePath(), dirPath);                
                
                textA_sumry.append("Done!\n");
                progBar.setValue(25);                
            }catch(Exception e)
            { 
                modelName=null;
                textA_sumry.append("Error!\n");
                error=true; 
            }            
        }
        
        //2. inlcude stat file
        if(chkBox_Stat.isSelected())
        {
            lbl_status.setText("Copying CAT Statistic File...");            
            try
            {                
                if(statFilePath.startsWith("Untitled"))  //create new file
                {
                    String newFile="ModelStatisitic."+CatFileExtensions.STAT_FILE_EXT;
                    if(modelName!=null)
                    {
                        newFile=modelName+"Statistic."+CatFileExtensions.STAT_FILE_EXT;
                    }                    
                    String filePath=dirPath+"\\"+newFile;
                    textA_sumry.append("Creating new Statistic file "+newFile+" ...");
                    
                    StatisticData.writeToFile(statisticData, filePath);
                }
                else   //copy
                {
                    try
                    {
                        File fileStc = new File(statFilePath);
                        textA_sumry.append("Copying "+fileStc.getName()+" ...");
                    
                        copyFile(fileStc.getAbsolutePath(), dirPath);                        
                    }
                    catch(Exception e)
                    {
                        textA_sumry.append("Error!\n");
                        String newFile="ModelStatisitic."+CatFileExtensions.STAT_FILE_EXT;
                        if(modelName!=null)
                        {
                            newFile=modelName+"Statistic."+CatFileExtensions.STAT_FILE_EXT;
                        }
                        String filePath=dirPath+"\\"+newFile;
                        textA_sumry.append("Creating new Statistic file "+newFile+" ...");
                   
                        StatisticData.writeToFile(statisticData, filePath);
                    }
                    
                }
                
                textA_sumry.append("Done!\n");
                progBar.setValue(50);                
            }catch(Exception e)
            { 
                textA_sumry.append("Error!\n");
                error=true; 
            }              
        }
        
        //3. include scr code
        if(chkBox_srcCds.isSelected())
        {
            lbl_status.setText("Copying all avaliable source code file(s)...");
            textA_sumry.append("Copying all avaliable source code file(s) :\n");
            try
            {
                String list[]=statisticData.getSrcCodeList();
                String codesPath=dirPath+"\\Source Codes";
                File fileScrCd = new File(codesPath);
                if(!fileScrCd.exists())
                { fileScrCd.mkdirs(); }
                
                for(int i=0;i<list.length;i++)
                { 
                    try{
                        
                        if(isPathPresentInList(list,i))
                        { continue; }
                        
                        textA_sumry.append("\tCopying "+list[i]+" ...");
                        
                        if(!list[i].startsWith("Unti"))
                        { 
                            copyFile(list[i], codesPath); 
                            textA_sumry.append("Done!\n");
                        }
                        else
                        { textA_sumry.append("Skipped!\n"); }
                        
                        
                    }catch(Exception e)
                    { textA_sumry.append("Error!\n");  }
                    
                }
                
                if(fileScrCd.listFiles().length==0)
                { fileScrCd.delete();   }
                                
                textA_sumry.append("Done!\n");               
                progBar.setValue(75);                
            }catch(Exception e)
            {                   
                error=true; 
            }             
        }
        
        //4. generate pdf
        if(chkBox_pdf.isSelected())
        {
            lbl_status.setText("Generating PDF file...");
            
            File filePdf = new File(dirPath+"\\ModelPdf.pdf");            
            if(modelName!=null)
            {  filePdf = new File(dirPath+"\\"+modelName+"Pdf.pdf"); }
            
            try
            {
                textA_sumry.append("Creating pdf file "+filePdf.getName()+" ...");
                statisticData.generatePDG(filePdf, chkBox_pdf_inclData.isSelected());
                
                textA_sumry.append("Done!\n");
                progBar.setValue(100);                
            }catch(Exception e)
            { 
                textA_sumry.append("Error!\n");
                filePdf.delete();
                error=true; 
            }              
        }
        
        
        progBar.setValue(100);
        progBar.setVisible(false);        
        
        if(error)
        { 
            lbl_status.setForeground(Color.red);
            lbl_status.setText("Done with few error(s)!"); 
        }
        else
        { lbl_status.setText("Done!"); }
        
        btn_gen.setEnabled(false);
        btn_cancel.setText("Close");
        */
        
        //showSummary();
        
    }//GEN-LAST:event_btn_genActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        if(fileChooser_path.showOpenDialog(this)== JFileChooser.APPROVE_OPTION)   //approve button clicked
        { 
            String path="";
            path=fileChooser_path.getSelectedFile().getAbsolutePath();           
            
            File filePath = new File(path);
            if(!filePath.isDirectory())
            { 
                dirPath="";
                textF_path.setText("Invalid directory name! Please select again");                             
            }
            else
            { 
                dirPath=path; 
                textF_path.setText(path);
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Dialog_CollectForOutput.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Dialog_CollectForOutput.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Dialog_CollectForOutput.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Dialog_CollectForOutput.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Dialog_CollectForOutput dialog = new Dialog_CollectForOutput(new javax.swing.JFrame(), true,null,"Untitled");
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    
    private boolean chkAllChoices()
    {
        boolean flag=false; 
        
        //atleast one chk box is selected
        for(int i=0;i<chkBx_list.length;i++)
        {
            if(chkBx_list[i].isSelected())
            { flag=true; break; }            
        }        
        if(flag==false)
        { return false; }
        
        //chk path
        if(dirPath.equals(""))
        { return false; }
        else
        {
            File file = new File(dirPath);
            if(!file.exists())
            {  file.mkdirs();  }
            
            if(!file.canWrite())
            { 
                dirPath="";
                textF_path.setText("The directory you have selected is non writable! Please select another directory!");                 
                return false;
            }
        }
        
        return true;
    }
    
    /*
    private void showSummary()
    {
        //panel_options.setVisible(false);
        remove(panel_options);
        repaint();
        
        JPanel panel_Summary1 = new javax.swing.JPanel();
        panel_Summary1.setPreferredSize(new java.awt.Dimension(250, 111));

        JTextArea textA_sumry= new JTextArea();
        textA_sumry.setColumns(20);
        textA_sumry.setRows(5);
        JScrollPane jScrollPane2 =new JScrollPane();
        jScrollPane2.setViewportView(textA_sumry);

        javax.swing.GroupLayout panel_Summary1Layout = new javax.swing.GroupLayout(panel_Summary1);
        panel_Summary1.setLayout(panel_Summary1Layout);
        panel_Summary1Layout.setHorizontalGroup(
            panel_Summary1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2)
        );
        panel_Summary1Layout.setVerticalGroup(
            panel_Summary1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 111, Short.MAX_VALUE)
        );
        
        
    }
    */
    
     private void copyFile(String source,String destintnDir) throws Exception
     {
        File sou=new File(source);        
        if(!sou.exists())
        {  throw new FileNotFoundException("File not found!");    }       
                     
            //copy file                        
            File dest= new File(destintnDir+"/"+sou.getName());
        
            FileChannel sourceFlCh = null;
            FileChannel destinationFlCh = null;
        
            try 
            {
                sourceFlCh = new FileInputStream(sou).getChannel();
                destinationFlCh = new FileOutputStream(dest).getChannel();            
            }catch(FileNotFoundException fnfe)
            {  throw fnfe;  }
        
            
            try
            {   
                long count = 0;
                long size = sourceFlCh.size();              
                while((count += destinationFlCh.transferFrom(sourceFlCh, 0, size-count))<size);
                
                sourceFlCh.close();
                destinationFlCh.close();                          
            }catch(IOException ioe)
            {  
                throw ioe;
            }  
            
     }
     
     private boolean isPathPresentInList(String list[],int toChkIdx)
     {
         for(int i=0;i<toChkIdx;i++)
         {
             if(list[i].equals(list[toChkIdx]))
             { return true; }
         }
         return false;
     }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_cancel;
    private javax.swing.JButton btn_gen;
    private javax.swing.JCheckBox chkBox_Stat;
    private javax.swing.JCheckBox chkBox_model;
    private javax.swing.JCheckBox chkBox_pdf;
    private javax.swing.JCheckBox chkBox_pdf_inclData;
    private javax.swing.JCheckBox chkBox_srcCds;
    private javax.swing.JFileChooser fileChooser_path;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JLabel lbl_status;
    private javax.swing.JPanel panel_options;
    private javax.swing.JProgressBar progBar;
    private javax.swing.JTextField textF_path;
    // End of variables declaration//GEN-END:variables

    private class ProcessThread extends Thread
    {
        public ProcessThread() 
        {
            start();
        }
        
        public void run()
        {       
        String fileSep="";
        try{
            fileSep=System.getProperty("file.separator");
        }catch(Exception e)
        { fileSep="/"; }
        
        //create textA
        JTextArea textA_sumry = new JTextArea();
        textA_sumry.setEditable(false);
        textA_sumry.setFont(new java.awt.Font("Tahoma", 0, 11));
        textA=textA_sumry;
        JScrollPane scrollPn_textA = new JScrollPane();        
        scrollPn_textA.setViewportView(textA_sumry);
        scrollPn_textA.setSize(365,panel_options.getSize().height-24); //scrollPn_textA.setSize(365, 156);
        panel_options.add(scrollPn_textA);        
        //panel_options.setSize(369, 191);
        //panel_options.validate();
        panel_options.repaint();
        
        //show progrss bar n lbl
        lbl_status.setVisible(true);
        progBar.setVisible(true);
        
        String sumryStr="";        
        boolean error=false;
        
              
        textA_sumry.append("Gathering files to \'"+dirPath+"\' ...\n");
        
        //get Model name
        String modelName=null;        
        StringTokenizer st = new StringTokenizer(new File(statisticData.modelPath).getName(), ".");
        if(st.hasMoreTokens())
        { modelName=st.nextToken(); }
        else
        { modelName=null; }
        
        //1. include model file
        if(chkBox_model.isSelected())
        {
            lbl_status.setText("Copying CAT Model File...");            
            try
            {
                File fileMdl = new File(statisticData.modelPath);
                textA_sumry.append("Copying "+fileMdl.getName()+" ...");                
                
                copyFile(fileMdl.getAbsolutePath(), dirPath);                
                
                textA_sumry.append("Done!\n");
                progBar.setValue(25);                
            }catch(Exception e)
            { 
                modelName=null;
                textA_sumry.append("Error!\n");
                error=true; 
            }            
        }
        
        //2. inlcude stat file
        if(chkBox_Stat.isSelected())
        {
            lbl_status.setText("Copying CAT Statistic File...");            
            try
            {                
                if(statFilePath.startsWith("Untitled"))  //create new file
                {
                    String newFile="ModelStatisitic."+CatFileExtensions.STAT_FILE_EXT;
                    if(modelName!=null)
                    {
                        newFile=modelName+"Statistic."+CatFileExtensions.STAT_FILE_EXT;
                    }                    
                    String filePath=dirPath+fileSep+newFile;  //String filePath=dirPath+"\\"+newFile;
                    textA_sumry.append("Creating new Statistic file "+newFile+" ...");
                    
                    StatisticData.writeToFile(statisticData, filePath);
                }
                else   //copy
                {
                    try
                    {
                        File fileStc = new File(statFilePath);
                        textA_sumry.append("Copying "+fileStc.getName()+" ...");
                    
                        copyFile(fileStc.getAbsolutePath(), dirPath);                        
                    }
                    catch(Exception e)
                    {
                        textA_sumry.append("Error!\n");
                        String newFile="ModelStatisitic."+CatFileExtensions.STAT_FILE_EXT;
                        if(modelName!=null)
                        {
                            newFile=modelName+"Statistic."+CatFileExtensions.STAT_FILE_EXT;
                        }
                        String filePath=dirPath+fileSep+newFile; //String filePath=dirPath+"\\"+newFile;
                        textA_sumry.append("Creating new Statistic file "+newFile+" ...");
                   
                        StatisticData.writeToFile(statisticData, filePath);
                    }
                    
                }
                
                textA_sumry.append("Done!\n");
                progBar.setValue(50);                
            }catch(Exception e)
            { 
                textA_sumry.append("Error!\n");
                error=true; 
            }              
        }
        
        //3. include scr code
        if(chkBox_srcCds.isSelected())
        {
            lbl_status.setText("Copying all avaliable source code file(s)...");
            textA_sumry.append("Copying all avaliable source code file(s) :\n");
            try
            {
                String list[]=statisticData.getSrcCodeList();
                String codesPath=dirPath+fileSep+"Source Codes"; //String codesPath=dirPath+"\\Source Codes";
                File fileScrCd = new File(codesPath);
                if(!fileScrCd.exists())
                { fileScrCd.mkdirs(); }
                
                for(int i=0;i<list.length;i++)
                { 
                    try{
                        
                        if(isPathPresentInList(list,i))
                        { continue; }
                        
                        textA_sumry.append("\tCopying "+list[i]+" ...");
                        
                        if(!list[i].startsWith("Unti"))
                        { 
                            copyFile(list[i], codesPath); 
                            textA_sumry.append("Done!\n");
                        }
                        else
                        { textA_sumry.append("Skipped!\n"); }
                        
                        
                    }catch(Exception e)
                    { textA_sumry.append("Error!\n");  }
                    
                }
                
                if(fileScrCd.listFiles().length==0)
                { fileScrCd.delete();   }
                                
                textA_sumry.append("Done!\n");               
                progBar.setValue(75);                
            }catch(Exception e)
            {                   
                error=true; 
            }             
        }
        
        //4. generate pdf
        if(chkBox_pdf.isSelected())
        {
            lbl_status.setText("Generating PDF file...");
            
            File filePdf = new File(dirPath+fileSep+"ModelPdf.pdf");          //File filePdf = new File(dirPath+"\\ModelPdf.pdf");            
            if(modelName!=null)
            {  filePdf = new File(dirPath+fileSep+modelName+"Pdf.pdf"); } //{  filePdf = new File(dirPath+"\\"+modelName+"Pdf.pdf"); }
            
            try
            {
                textA_sumry.append("Creating pdf file "+filePdf.getName()+" ...");
                statisticData.generatePDG(filePdf, chkBox_pdf_inclData.isSelected());
                
                textA_sumry.append("Done!\n");
                progBar.setValue(100);                
            }catch(Exception e)
            { 
                textA_sumry.append("Error!\n");
                filePdf.delete();
                error=true; 
            }              
        }
        
        
        progBar.setValue(100);
        progBar.setVisible(false);        
        
        if(error)
        { 
            lbl_status.setForeground(Color.red);
            lbl_status.setText("Done with few error(s)!"); 
        }
        else
        { lbl_status.setText("Done!"); }
        
        btn_gen.setEnabled(false);
        btn_cancel.setText("Close");
        }
        
    }
}
