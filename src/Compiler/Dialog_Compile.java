/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Compiler;

import commanLib.PerformRecord;
import java.awt.Dimension;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.StringTokenizer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.table.DefaultTableModel;

public class Dialog_Compile extends javax.swing.JDialog 
{
    CompilerCode compileThread = null;
    CATCompiler CMPREF=null;
    
    PerformRecord perfomRcrd=null;

    public Dialog_Compile(java.awt.Frame parent, boolean modal,CompilerModelData cmMdl,JTextArea TxtAcd,JTable table_sym,CATCompiler cmpRef) {
        super(parent, modal);
        initComponents();
        
        this.setLocationRelativeTo(null);  
        
        /*
        table_msg.getTableHeader().setVisible(false);
        table_msg.getTableHeader().setPreferredSize(new Dimension(0, 0));
        
        table_msg.getColumnModel().getColumn(0).setPreferredWidth(20);
        table_msg.getColumnModel().getColumn(1).setPreferredWidth(80);
        table_msg.getColumnModel().getColumn(2).setPreferredWidth(316);
        * 
        */
        
        CMPREF=cmpRef;        
        
        cmMdl.sysmbolTable.resetSymTable();
        clearTable(table_sym);
        cmMdl.errorTable.resetTable();
        clearTable(CMPREF.table_errors); 
        cmMdl.resetTokenStream();
        CATCompiler.resetCompileMsgTable();
        compileThread = new CompilerCode(cmMdl, TxtAcd,table_sym);
        
        try{  //Event Dsipatch
            setVisible(true);
        }catch(Throwable t){}
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btn_stop = new javax.swing.JButton();
        progBarTOTAL = new javax.swing.JProgressBar();
        lblCurrActivity = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Compiling...");
        setResizable(false);

        btn_stop.setText("Cancel");
        btn_stop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_stopActionPerformed(evt);
            }
        });

        lblCurrActivity.setText("Total Progress :");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(progBarTOTAL, javax.swing.GroupLayout.DEFAULT_SIZE, 334, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btn_stop, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lblCurrActivity, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblCurrActivity, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(progBarTOTAL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btn_stop)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_stopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_stopActionPerformed
        // TODO add your handling code here:
        compileThread.stop();
        compileThread=null;
        CMPREF.setCompileMesage("Compiling process Aborted by the user!",-2);            
        dispose();
        //btn_ok.setEnabled(true);        
    }//GEN-LAST:event_btn_stopActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Dialog_Compile.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Dialog_Compile.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Dialog_Compile.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Dialog_Compile.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the dialog
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                Dialog_Compile dialog = new Dialog_Compile(new javax.swing.JFrame(), true,null,null,null,null);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    
    private void clearTable(JTable tb)
    {
        DefaultTableModel model=(DefaultTableModel)tb.getModel();
        for( int i = model.getRowCount() - 1; i >= 0; i-- )
        {   
            model.removeRow(i);
        }
    }
    
    public PerformRecord retPerformRecord()
    {
        return perfomRcrd;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_stop;
    private javax.swing.JLabel lblCurrActivity;
    private javax.swing.JProgressBar progBarTOTAL;
    // End of variables declaration//GEN-END:variables

    
    class CompilerCode extends Thread
    {
        private boolean stop=false;
        private CompilerModelData cmModel=null;
        private JTextArea txtARef=null;
        private String code="";
        private JTable table_sym=null;
        //private CATCompiler cmpRef=null

        public CompilerCode(CompilerModelData mdl, JTextArea r,JTable tb_sym) 
        {
            cmModel=mdl;
            txtARef=r;
            table_sym=tb_sym;            
            start();
        }
        
        public void run()
        {            
            //progBarPhase.setIndeterminate(true);
            long lexTime=0,totTime=0;
            
            CMPREF.setCompileMesage("Loading source code to memory...",0);            
            code=txtARef.getText();
            CMPREF.setCompileMesage("Done",1); progBarTOTAL.setValue(10);
                      
           //(A) LEXICAL ANALYSIS
            lblCurrActivity.setText("Performing Lexical Analysis...");
            CMPREF.setCompileMesage("Performing Lexical Analysis...",0);   
            long startTimeMs = System.currentTimeMillis( );
            cmModel.lexicalAnaylser(code,CMPREF);
            CMPREF.setCompileMesage("Lexical Analysis completed!",1); progBarTOTAL.setValue(40);
            lexTime=(System.currentTimeMillis()-startTimeMs);
            
          //FINISHED
            long stopTimeMs = System.currentTimeMillis( );
            lblCurrActivity.setText("Compilation successfully completed!");
            totTime=(stopTimeMs-startTimeMs);
            CMPREF.setCompileMesage("Total Compile Time : "+totTime+" milliseconds",2);
            progBarTOTAL.setValue(100);
            
           //Updating GUI
            lblCurrActivity.setText("Compilation Completed! Displaying results...");
            progBarTOTAL.setIndeterminate(true);
            
            //(1) Symbol Table
            int totSymbols=cmModel.sysmbolTable.displaySymbTbonJtable(table_sym);
            if(totSymbols==0)
            {
                CMPREF.tabPane_symbl.setTitleAt(0, "Symbol Table");                
            }
            else
            {                
                CMPREF.tabPane_symbl.setTitleAt(0, "Symbol Table ("+totSymbols+")");                
            }
            
            //(2) Error Table
            int totErr=cmModel.errorTable.displayErrorTable(CMPREF.table_errors);            
            if(totErr==0)
            {
                CMPREF.tabPane_symbl.setTitleAt(1, "Errors");
                CMPREF.tabPane_symbl.setEnabledAt(1, false);                
            }
            else
            {
                CMPREF.tabPane_symbl.setEnabledAt(1, true);
                CMPREF.tabPane_symbl.setTitleAt(1, "Errors ("+totErr+")");                
            }
            
            //(3) Token Stream
            cmModel.displayTokenStream(CMPREF.textP_tknStrm);
            
            
            //statisData data            
            perfomRcrd = new PerformRecord(0,"", lexTime, totTime);
            
            //btn_ok.setEnabled(true);
            btn_stop.setEnabled(false);                        
            progBarTOTAL.setIndeterminate(false); progBarTOTAL.setValue(100);
            
            CATCompiler.setStatusMesg("Compiling...Done! Total Time : "+(stopTimeMs-startTimeMs)+" milliseconds", 0);
            dispose();
        }
        
        /*
        private void setMessage(String message)
        {
            SimpleDateFormat sdf = new SimpleDateFormat("HH:mm:ss:SS");
            String s = sdf.format(new Date());
            
            DefaultTableModel tbMd = (DefaultTableModel)table_msg.getModel();
            tbMd.insertRow(table_msg.getRowCount(), new Object[]{"",s,message});
        }
        */
                
    }
    
    
}
