package Compiler;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileReader;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;
import javax.swing.text.StyledDocument;

public class Dialog_OpenSrcCd extends javax.swing.JDialog 
{
   
    private JTextArea textpRef=null;
    private String path=null;   
        
    ReadSourceFileThread t = null;
    
    public volatile boolean success=false;
    
    
            
    public Dialog_OpenSrcCd(java.awt.Frame parent, boolean modal,JTextArea ref,String pth) 
    {
        super(parent, modal);
        initComponents();
        
        this.setLocationRelativeTo(null);             
        
        textpRef=ref;
        path=pth;   
        
        
        t= new ReadSourceFileThread(this, textpRef,path);
        
        try{   //Event dispatch
            setVisible(true);
        }catch(Throwable t){}
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        progressBar = new javax.swing.JProgressBar();
        btn_cancel = new javax.swing.JButton();
        lbl_st = new javax.swing.JLabel();
        lbl_lngth = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Reading Source Code File...");
        setResizable(false);

        progressBar.setStringPainted(true);

        btn_cancel.setText("Cancel");
        btn_cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_cancelActionPerformed(evt);
            }
        });

        lbl_st.setText("Reading Source Code File...");

        lbl_lngth.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lbl_lngth.setText("Length : 0 bytes");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(progressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btn_cancel, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lbl_st, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lbl_lngth, javax.swing.GroupLayout.DEFAULT_SIZE, 178, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_st)
                    .addComponent(lbl_lngth))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btn_cancel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_cancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_cancelActionPerformed
        // TODO add your handling code here:
        t.cancelReading();
        t=null;        
        success=false;
        dispose();
    }//GEN-LAST:event_btn_cancelActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Dialog_OpenSrcCd.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Dialog_OpenSrcCd.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Dialog_OpenSrcCd.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Dialog_OpenSrcCd.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the dialog
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                Dialog_OpenSrcCd dialog = new Dialog_OpenSrcCd(new javax.swing.JFrame(), true,null,null);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
        
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_cancel;
    private javax.swing.JLabel lbl_lngth;
    private javax.swing.JLabel lbl_st;
    private javax.swing.JProgressBar progressBar;
    // End of variables declaration//GEN-END:variables


    class ReadSourceFileThread extends Thread
    {
        private Dialog_OpenSrcCd diagRef=null;
        private JTextArea txtpRef=null;
        private String path=null;
        private String content="";
        private volatile boolean stop=false;
        

        public ReadSourceFileThread(Dialog_OpenSrcCd ref, JTextArea tPref,String pth) 
        {
            diagRef=ref;
            txtpRef=tPref;
            path=pth;
            start();
        }
        
        public void run()
        {       
            int totLngth=0,bar=0;
            try
            {             
                File file = new File(path);
                FileReader fr = new FileReader(file);            
                BufferedReader buf = new BufferedReader(fr);
                
                totLngth=(int)file.length();                
                if(totLngth>100000)
                {
                    int response=JOptionPane.showConfirmDialog(diagRef,"The file is comparably too big to be opened.\nDo you want to continue opening ?", "Too big file..", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
                    if(response==JOptionPane.NO_OPTION)
                    { diagRef.dispose(); diagRef.t=null; return; }
                }
                diagRef.lbl_lngth.setText("Length : "+totLngth+" bytes");
                
                int ctr=0;                
                String line="";
                textpRef.setText("");
                do
                {
                    line=buf.readLine();
                    if(line!=null)
                    { 
                        //textpRef.append(line+"\n");
                        content+=line+"\n";                                                     
                        ctr+=line.length()+2;
                        bar=(ctr*100)/totLngth; //System.out.println(bar);
                        diagRef.progressBar.setValue(bar);                        
                    }
                    //remove last '\n'
                    
                
                }while(line!=null && stop==false);                
                fr.close();                               
                        
                
                if(!stop)
                {                    
                    progressBar.setStringPainted(false);
                    progressBar.setIndeterminate(true);
                    textpRef.setText(content);  //System.out.println(content);//txtpRef.setText(content);                                          
                    progressBar.setIndeterminate(false); 
                    content=null;
                    success=true;
                } 
                
            
            }catch(Exception e)
            {  JOptionPane.showMessageDialog(diagRef, e.toString(),"Error!", JOptionPane.ERROR_MESSAGE);   }
            
            
            diagRef.dispose();  diagRef.t=null;
        }

        /*
        public void run()
        {       
            int totLngth=0,bar=0;
            try
            {                
                FileInputStream fin = new FileInputStream(new File(path));            
            
                totLngth=fin.available();
                diagRef.lbl_lngth.setText("Length : "+totLngth+" bytes");
                int i=0,ctr=0;
                do
                {
                    i=fin.read();
                    if(i!=-1)
                    { 
                        content+=(char)i; 
                        ctr++;
                        bar=(ctr*100)/totLngth;
                        diagRef.progressBar.setValue(bar);                        
                    }
                
                }while(i!=-1 && stop==false);                
                fin.close();                               
                
                if(!stop)
                {
                    progressBar.setIndeterminate(true);
                    txtpRef.setText(content);  
                    progressBar.setIndeterminate(false); 
                }                
            
            }catch(Exception e)
            {  JOptionPane.showMessageDialog(diagRef, e.toString(),"Error!", JOptionPane.ERROR_MESSAGE);   }
            
            diagRef.dispose();  diagRef.t=null;
        }
        * 
        */
                
        public void cancelReading()
        {
            stop=true;
        }
        
    }


}
