package editor;

import commanLib.CATFeedback.CATFeedback;
import commanLib.Dialog_ExceptionHandler;
import commanLib.ModelData;
import java.awt.Container;
import java.awt.Graphics;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.InvalidClassException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.NoSuchElementException;
import java.util.StringTokenizer;
import javax.swing.*;
import javax.swing.tree.TreePath;

 
public class CATModeler extends javax.swing.JFrame 
{
   
    private static DefaultListModel listModel = new DefaultListModel();

    HashSet<String> regExpFireSet = new HashSet<String>();
    HashSet<String> transFireSet = new HashSet<String>();
    //ArrayList<TreePath> openFrams = new ArrayList<TreePath>();
    private String filePath="";
    public static ModelData data = new ModelData();
    
    
    
    public CATModeler() {
        
        //(1)Set defualt look n feel
          try{
              //UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
          }catch(Exception e)
          { 
              //System.out.println("Windows isn't available");               
          }
          
        initComponents();
        
        //Open at center of screen
        this.setLocationRelativeTo(null);  
        
        //SetIcon
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/editor/Images/CAT_Modeler_Icon.png")));
        
        //Adding Scrollbars
        /*
          Container c= getContentPane();        
          JScrollPane scroll = new JScrollPane(c );  
          setContentPane( scroll );
          * 
          */
        
        //GUI component reinitialization
           //fileChooser.addChoosableFileFilter(new CompilerTextFilter());
           fileChooser.setAcceptAllFileFilterUsed(false);
           msgBox.setModel(listModel);
                
           for(int i=0;i<indexTree.getRowCount();i++)
           {  indexTree.expandRow(i);  }
           
           regExpFireSet.add("Identifier");
           regExpFireSet.add("Integer");
           regExpFireSet.add("Character");
           regExpFireSet.add("Floating (Decimal)");
           regExpFireSet.add("String");
           
           transFireSet.add("Arithmetic");
           transFireSet.add("Relational");
           transFireSet.add("Logical");
           transFireSet.add("Bitwise");
           transFireSet.add("Assignment");
           transFireSet.add("Comments");
              
           //Maximize frame
           setExtendedState(JFrame.MAXIMIZED_BOTH);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileChooser = new javax.swing.JFileChooser();
        splitTopDown = new javax.swing.JSplitPane();
        splitLeftRight = new javax.swing.JSplitPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        indexTree = new javax.swing.JTree();
        rightDesktopPane = new javax.swing.JDesktopPane();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        msgBox = new javax.swing.JList();
        statusPanel = new javax.swing.JPanel();
        progrsBar = new javax.swing.JProgressBar();
        statusMsg = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        New = new javax.swing.JMenuItem();
        file_open = new javax.swing.JMenuItem();
        file_save = new javax.swing.JMenuItem();
        file_saveAs = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        file_exit = new javax.swing.JMenuItem();
        menu_algo = new javax.swing.JMenu();
        menu_algo_syntax = new javax.swing.JMenu();
        menu_algo_syntax_parser = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        help_feedback = new javax.swing.JMenuItem();
        help_about = new javax.swing.JMenuItem();

        fileChooser.setFileFilter(new CompilerTextFilter());

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Compiler Automation Tool – Modeler | [Untitled]");
        setMinimumSize(new java.awt.Dimension(800, 600));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        splitTopDown.setDividerLocation(520);
        splitTopDown.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        splitTopDown.setOneTouchExpandable(true);
        splitTopDown.setPreferredSize(new java.awt.Dimension(900, 600));

        splitLeftRight.setDividerLocation(170);

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("root");
        javax.swing.tree.DefaultMutableTreeNode treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("General Properties");
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Lexical Design");
        javax.swing.tree.DefaultMutableTreeNode treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Input Sets");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Keywords");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Identifier");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Literals");
        javax.swing.tree.DefaultMutableTreeNode treeNode4 = new javax.swing.tree.DefaultMutableTreeNode("Integer");
        treeNode3.add(treeNode4);
        treeNode4 = new javax.swing.tree.DefaultMutableTreeNode("Character");
        treeNode3.add(treeNode4);
        treeNode4 = new javax.swing.tree.DefaultMutableTreeNode("Floating (Decimal)");
        treeNode3.add(treeNode4);
        treeNode4 = new javax.swing.tree.DefaultMutableTreeNode("String");
        treeNode3.add(treeNode4);
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Punctuators");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Operators");
        treeNode4 = new javax.swing.tree.DefaultMutableTreeNode("Arithmetic");
        treeNode3.add(treeNode4);
        treeNode4 = new javax.swing.tree.DefaultMutableTreeNode("Relational");
        treeNode3.add(treeNode4);
        treeNode4 = new javax.swing.tree.DefaultMutableTreeNode("Logical");
        treeNode3.add(treeNode4);
        treeNode4 = new javax.swing.tree.DefaultMutableTreeNode("Bitwise");
        treeNode3.add(treeNode4);
        treeNode4 = new javax.swing.tree.DefaultMutableTreeNode("Assignment");
        treeNode3.add(treeNode4);
        treeNode4 = new javax.swing.tree.DefaultMutableTreeNode("Others");
        treeNode3.add(treeNode4);
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Comments");
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        indexTree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        indexTree.setRootVisible(false);
        indexTree.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                indexTreeMouseClicked(evt);
            }
        });
        indexTree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                indexTreeValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(indexTree);

        splitLeftRight.setLeftComponent(jScrollPane1);

        rightDesktopPane.setBackground(new java.awt.Color(204, 204, 204));

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/editor/Images/CAT_BG_Logo.png"))); // NOI18N
        jLabel2.setBounds(180, 150, 380, 187);
        rightDesktopPane.add(jLabel2, javax.swing.JLayeredPane.DEFAULT_LAYER);

        splitLeftRight.setRightComponent(rightDesktopPane);

        splitTopDown.setLeftComponent(splitLeftRight);

        jScrollPane2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Message", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP));

        msgBox.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane2.setViewportView(msgBox);

        splitTopDown.setBottomComponent(jScrollPane2);

        statusPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        statusPanel.setPreferredSize(new java.awt.Dimension(900, 21));

        statusMsg.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);

        jLabel1.setText("© 2013 Gagandeep, Hargeet, Amarpreet, Harpreet");

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator1.setPreferredSize(new java.awt.Dimension(10, 15));

        javax.swing.GroupLayout statusPanelLayout = new javax.swing.GroupLayout(statusPanel);
        statusPanel.setLayout(statusPanelLayout);
        statusPanelLayout.setHorizontalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, statusPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 418, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 5, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(statusMsg, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(progrsBar, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        statusPanelLayout.setVerticalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(progrsBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(statusMsg, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel1)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        fileMenu.setText("File");

        New.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        New.setIcon(new javax.swing.ImageIcon(getClass().getResource("/editor/Images/NewModel.png"))); // NOI18N
        New.setText("New");
        New.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NewActionPerformed(evt);
            }
        });
        fileMenu.add(New);

        file_open.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        file_open.setIcon(new javax.swing.ImageIcon(getClass().getResource("/editor/Images/openModel.png"))); // NOI18N
        file_open.setText("Open");
        file_open.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                file_openActionPerformed(evt);
            }
        });
        fileMenu.add(file_open);

        file_save.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        file_save.setIcon(new javax.swing.ImageIcon(getClass().getResource("/editor/Images/save.png"))); // NOI18N
        file_save.setText("Save");
        file_save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                file_saveActionPerformed(evt);
            }
        });
        fileMenu.add(file_save);

        file_saveAs.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        file_saveAs.setIcon(new javax.swing.ImageIcon(getClass().getResource("/editor/Images/saveAs.png"))); // NOI18N
        file_saveAs.setText("Save As");
        file_saveAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                file_saveAsActionPerformed(evt);
            }
        });
        fileMenu.add(file_saveAs);
        fileMenu.add(jSeparator2);

        file_exit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        file_exit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/editor/Images/exit.png"))); // NOI18N
        file_exit.setText("Exit");
        file_exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                file_exitActionPerformed(evt);
            }
        });
        fileMenu.add(file_exit);

        menuBar.add(fileMenu);

        menu_algo.setText("Algorithms");

        menu_algo_syntax.setText("Syntax Analysis");

        menu_algo_syntax_parser.setText("Parser ToolKit");
        menu_algo_syntax_parser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_algo_syntax_parserActionPerformed(evt);
            }
        });
        menu_algo_syntax.add(menu_algo_syntax_parser);

        menu_algo.add(menu_algo_syntax);

        menuBar.add(menu_algo);

        helpMenu.setText("Help");

        help_feedback.setIcon(new javax.swing.ImageIcon(getClass().getResource("/commanLib/images/feedback.png"))); // NOI18N
        help_feedback.setText("Send a Feedback Mail");
        help_feedback.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                help_feedbackActionPerformed(evt);
            }
        });
        helpMenu.add(help_feedback);

        help_about.setIcon(new javax.swing.ImageIcon(getClass().getResource("/commanLib/images/about.png"))); // NOI18N
        help_about.setText("About");
        help_about.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                help_aboutActionPerformed(evt);
            }
        });
        helpMenu.add(help_about);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(splitTopDown, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(statusPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(splitTopDown, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(statusPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void indexTreeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_indexTreeMouseClicked
        // TODO add your handling code here:
        if(evt.getClickCount()==2)        
        {
            TreePath tp=indexTree.getSelectionPath();            
            
            try
            {
                String nodeName=String.valueOf(tp.getLastPathComponent());
                                
                setMessages("Opening model for "+nodeName+"...", "Opening "+nodeName+" ...", -1);
                
                    if(nodeName.equals("General Properties"))
                    {
                        popGenPropIntrFrame();
                    }
                    else if(nodeName.equals("Input Sets"))
                    {
                        popInputSetIntrFrm();                        
                    }
                    else if(nodeName.equals("Keywords"))
                    {
                        popKeywrdIntrFrm();
                    }
                    else if(nodeName.equals("Punctuators"))
                    {
                        popPunctIntrFrame();
                    }                    
                    else if(nodeName.equals("Others"))
                    {
                        popOtherOprIntrFrame();
                    }
                    else if( regExpFireSet.contains(nodeName))
                    {   
                        IntrFrm_RegExpr frmRef=popRegInternalFrame(nodeName); 
                        if(frmRef!=null)
                        { data.loadRegExprFram(nodeName, frmRef); }
                        //frmRef.loadData("expr", "ret");
                    }   
                    else if( transFireSet.contains(nodeName))   //Operatos and Comments
                    {              
                        IntrFrm_transDiag frmRef=popTrandsDiagIntrFrame(nodeName);
                        if(frmRef!=null)
                        { data.loadTransDiagFram(nodeName, frmRef); }
                    }   
                                        
                    setMessages("Done!", "Opening "+nodeName+" ...Done", 0);
            
            }catch(Exception e){ e.printStackTrace();}             
            
        }
        
    }//GEN-LAST:event_indexTreeMouseClicked

    private void file_saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_file_saveActionPerformed
        // TODO add your handling code here:
        
        /*
        String path="";
        boolean flag=true;
        if(filePath.equals(""))
        {
            if(fileChooser.showSaveDialog(this)== JFileChooser.APPROVE_OPTION)   //approve button clicked
            {
                path=fileChooser.getSelectedFile().getAbsolutePath();                
                
                filePath=insertFileExt(path);
            }            
            else
            { flag=false; }
        }
        
        if(flag)
        {   
            LanguageEditor.setMessages("Saving Model to file : "+filePath+" ...", "Saving...", -1);
            try
            {
                ModelData.saveData(data, filePath);                
                LanguageEditor.setMessages("Done!", "Saving...Done!", 0);
            }catch(Exception e)
            { filePath=""; LanguageEditor.setMessages("Error Saving! "+e, "Saving...Error!", 0);  }            
            
            
        }
        */
        
        saveToFile();
        
    }//GEN-LAST:event_file_saveActionPerformed

    private void indexTreeValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_indexTreeValueChanged
        // TODO add your handling code here:
        
        System.out.println(evt.getPath().getLastPathComponent());
    }//GEN-LAST:event_indexTreeValueChanged

    private void NewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NewActionPerformed
        // TODO add your handling code here:
        if(rightDesktopPane.getAllFrames().length!=0)
        {
            JOptionPane.showMessageDialog(this, "Some of the models are currently being editted!\nPlease apply or cancel all models before saving!","Deneid!",JOptionPane.ERROR_MESSAGE);
            return;
        }
        
       int result=JOptionPane.showOptionDialog(this, "Save Current Model ?", "Save", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null,new Object[]{"Save","Dont Save","Cancel"},null);
       
       if(result==JOptionPane.YES_OPTION)
       {
           saveToFile();           
       }
       else if(result==JOptionPane.NO_OPTION)
       {}
       else
       { return; }
       
       setMessages("Loading New Model...", "New Model...", -1);
       data=new ModelData();
       filePath="";
       setTitle("Compiler Automation Tool – Modeler | [Untitled]");
       setMessages("Done!", "", 0);
       
        
    }//GEN-LAST:event_NewActionPerformed

    private void file_saveAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_file_saveAsActionPerformed
        // TODO add your handling code here:
       
        //chk for currently open models
        if(rightDesktopPane.getAllFrames().length!=0)
        {
            JOptionPane.showMessageDialog(this, "Some of the models are currently being editted!\nPlease apply or cancel all models before saving!","Deneid!",JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        //chk for empty properties
        if(data.chkProperties()==false)
        {
            JOptionPane.showMessageDialog(this, "Cannot save model. Please fill all model\nproperties before saving.", "Model Properties not set...", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
       if(data.retEmptyModelList().size()!=0)
        {                        
            JOptionPane optionPane = new JOptionPane();         
            JList lst = new JList(data.retEmptyModelList());
            lst.setSelectionMode(0);            
            optionPane.setMessage(new Object[] { "Warning!\nThe following models have not been implemented.\nDo you wish to continue Saving ?", lst });
            optionPane.setMessageType(JOptionPane.WARNING_MESSAGE);
            optionPane.setOptionType(JOptionPane.YES_NO_OPTION);
            JDialog dialog = optionPane.createDialog(this, "Warning! Empty Models!");
            dialog.setVisible(true);    
            
            int sel;
            try
            { sel =(Integer)optionPane.getValue(); }
            catch(Exception e)
            { sel=-1; }
            
            if(sel!=0)
            { return; }
        } 
        
       if(fileChooser.showSaveDialog(this)== JFileChooser.APPROVE_OPTION)   //approve button clicked
       {                                      
          filePath=insertFileExt(fileChooser.getSelectedFile().getAbsolutePath());
          
          CATModeler.setMessages("Saving Model to file : "+filePath+" ...", "Saving...", -1);
          try
          {
              ModelData.saveData(data, filePath);                
              CATModeler.setMessages("Done!", "Saving...Done!", 0);
              setTitle("Compiler Automation Tool – Modeler | ["+filePath+"]");
          }catch(Exception e)
          { filePath=""; CATModeler.setMessages("Error Saving! "+e, "Saving...Error!", 0);  }
                    
       }  
       
    }//GEN-LAST:event_file_saveAsActionPerformed

    private void file_openActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_file_openActionPerformed
        // TODO add your handling code here:
        
       if(rightDesktopPane.getAllFrames().length!=0)
       {
            JOptionPane.showMessageDialog(this, "Some of the models are currently being editted!\nPlease apply or cancel all models before saving!","Deneid!",JOptionPane.ERROR_MESSAGE);
            return;
       }
        
       int result=JOptionPane.showOptionDialog(this, "Save Current Model ?", "Save", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null,new Object[]{"Save","Dont Save","Cancel"},null);
       
       if(result==JOptionPane.YES_OPTION)
       {
           saveToFile();
       }
       else if(result==JOptionPane.NO_OPTION)
       {}
       else
       { return; }
        
       if(fileChooser.showOpenDialog(this)== JFileChooser.APPROVE_OPTION)   //approve button clicked
       {                                     
          String path="";
          path=fileChooser.getSelectedFile().getAbsolutePath();
          if(chkFileExt(path))
          { 
              //filePath=path;
              CATModeler.setMessages("Loading Models from file : "+path+" ...", "Loading...", -1);
              try
              {
                  data=ModelData.readData(path);                  
                  //data.showData();
                  filePath=path;
                  setTitle("Compiler Automation Tool – Modeler | ["+filePath+"]");
                  setMessages("Done!", "Loading...Done!", 0);
              }   
              catch(InvalidClassException ice)
              {
                  setMessages("Error Reading! Corrupted or Obsolete file version!", "Loading...Error!", 0);
                  Dialog_ExceptionHandler.autoPopMessageJOptionPane(this, "Error reading model file...", "An error occurred while reading model file.", "Either the file is corrupted or you are using\nobsolete model file version.", JOptionPane.ERROR_MESSAGE);
              }
              catch(Exception e)
              {
                  Dialog_ExceptionHandler.autoPopJOptionPane(this, "Error reading File...", "Error Reading Model File!", e, JOptionPane.ERROR_MESSAGE);
                  setMessages("Error Reading!", "Loading...Error!", 0);  
              }
                            
          }
          else
          {              
              setMessages("Error loading file : "+path+" . File Extension not supported!", "Loading...Error!", 0);
              JOptionPane.showMessageDialog(this, "File Not Supported!", "Error reading File...", JOptionPane.ERROR_MESSAGE);
          }
       }  
    }//GEN-LAST:event_file_openActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        promptAndClose();
    }//GEN-LAST:event_formWindowClosing

    private void file_exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_file_exitActionPerformed
        // TODO add your handling code here:
        promptAndClose();
    }//GEN-LAST:event_file_exitActionPerformed

    private void menu_algo_syntax_parserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_algo_syntax_parserActionPerformed
        // TODO add your handling code here:
        popSyntaxToolkit();
    }//GEN-LAST:event_menu_algo_syntax_parserActionPerformed

    private void help_aboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_help_aboutActionPerformed
        // TODO add your handling code here:
        Dialog_Modlr_About d=new Dialog_Modlr_About(this, true);
        //d.getData(CNF.firstName+" "+CNF.lastName, CNF.company);
        d.setVisible(true);
    }//GEN-LAST:event_help_aboutActionPerformed

    private void help_feedbackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_help_feedbackActionPerformed
        // TODO add your handling code here:
        CATFeedback frame = new CATFeedback();
        frame.setVisible(true);
    }//GEN-LAST:event_help_feedbackActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CATModeler.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CATModeler.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CATModeler.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CATModeler.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new CATModeler().setVisible(true);
            }
        });
    }
    
    //---------MY Methods--------------------------
    
    private void promptAndClose()
    {
       int result=JOptionPane.showOptionDialog(this, "Do you want to save the Model ?", "Compiler Modeling", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null,null,null);
              
       if(result==JOptionPane.YES_OPTION)
       {
           if(!saveToFile())
           { return; }
       }
       else if(result==JOptionPane.NO_OPTION)
       {  }
       else
       { return; }
       
       System.gc(); System.exit(0);
    }
    
    private boolean saveToFile()
    {
        //chk for currently open models                
        if(rightDesktopPane.getAllFrames().length!=0)
        {
            JOptionPane.showMessageDialog(this, "Some of the models are currently being editted!\nPlease apply or cancel all models before saving!","Deneid!",JOptionPane.ERROR_MESSAGE);
            return false;
        }
        
        //chk for empty properties
        if(data.chkProperties()==false)
        {
            JOptionPane.showMessageDialog(this, "Cannot save model. Please fill all model\nproperties before saving.", "Model Properties not set...", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        
        
        //check for empty models        
        System.out.println(data.retEmptyModelList().size());
        
        if(data.retEmptyModelList().size()!=0)
        {                        
            JOptionPane optionPane = new JOptionPane();         
            JList lst = new JList(data.retEmptyModelList());
            lst.setSelectionMode(0);  
            JScrollPane scrollPn_lst = new JScrollPane();
            scrollPn_lst.setPreferredSize(new java.awt.Dimension(100,100));
            scrollPn_lst.setViewportView(lst);
            
            optionPane.setMessage(new Object[] { "Warning!\nThe following models have not been implemented.\nDo you wish to continue Saving ?", scrollPn_lst });
            optionPane.setMessageType(JOptionPane.WARNING_MESSAGE);
            optionPane.setOptionType(JOptionPane.YES_NO_OPTION);
            JDialog dialog = optionPane.createDialog(this, "Warning! Empty Models!");
            dialog.setVisible(true);    
            
            int sel;
            try
            { sel =(Integer)optionPane.getValue(); }
            catch(Exception e)
            { sel=-1; }
            
            if(sel!=0)  //not yes
            { return false; }
        }
        
        String path="";
        boolean flag=true;
        if(filePath.equals(""))
        {
            if(fileChooser.showSaveDialog(this)== JFileChooser.APPROVE_OPTION)   //approve button clicked
            {
                path=fileChooser.getSelectedFile().getAbsolutePath();                
                
                filePath=insertFileExt(path);
            }            
            else
            { flag=false; }
        }
        
        
        
        if(flag)
        {   
            CATModeler.setMessages("Saving Model to file : "+filePath+" ...", "Saving...", -1);
            try
            {
                ModelData.saveData(data, filePath);                
                setTitle("Compiler Automation Tool – Modeler | ["+filePath+"]");
                CATModeler.setMessages("Done!", "Saving...Done!", 0);
            }catch(Exception e)
            { filePath=""; CATModeler.setMessages("Error Saving! "+e, "Saving...Error!", 0);  }            
            
            
        }
        
        return flag;
    }
    
    
    private IntrFrm_RegExpr popRegInternalFrame(String title)
    {
        JInternalFrame framLst[] = rightDesktopPane.getAllFrames();
        for(JInternalFrame i : framLst)
        {
            if(i instanceof IntrFrm_RegExpr)
            { 
                if(i.getTitle().equals(title+" | Regular Expression"))  
                { i.toFront(); return null; }
            }
        }
        
        editor.IntrFrm_RegExpr intrFrm_RegExpr = new editor.IntrFrm_RegExpr();
        
        intrFrm_RegExpr.setVisible(true);
        intrFrm_RegExpr.setBounds(20, 10, 600, 500);
        rightDesktopPane.add(intrFrm_RegExpr, javax.swing.JLayeredPane.DEFAULT_LAYER);
        
        intrFrm_RegExpr.setTitle(title+" | Regular Expression");        
        intrFrm_RegExpr.toFront();
        return intrFrm_RegExpr;
        
    }
    
    private void popKeywrdIntrFrm()
    {
        JInternalFrame framLst[] = rightDesktopPane.getAllFrames();
        for(JInternalFrame i : framLst)
        {
            if(i instanceof IntrFrm_Keywords)
            { i.toFront(); return; }
        }
        
        editor.IntrFrm_Keywords intrFrm_Keywords = new editor.IntrFrm_Keywords();
        
        intrFrm_Keywords.setVisible(true);
        intrFrm_Keywords.setBounds(30, 20, 332, 470);
        rightDesktopPane.add(intrFrm_Keywords, javax.swing.JLayeredPane.DEFAULT_LAYER);
        
        intrFrm_Keywords.toFront();
        intrFrm_Keywords.loadData();
    }
    
    private void popInputSetIntrFrm()
    {
        JInternalFrame framLst[] = rightDesktopPane.getAllFrames();
        for(JInternalFrame i : framLst)
        {
            if(i instanceof IntrFrm_InputSet)
            { i.toFront(); return; }
        }
        
        editor.IntrFrm_InputSet intrFrm_InputSet = new editor.IntrFrm_InputSet();
              
        intrFrm_InputSet.setVisible(true);
        intrFrm_InputSet.setBounds(20, 10, 530, 500);
        rightDesktopPane.add(intrFrm_InputSet, javax.swing.JLayeredPane.DEFAULT_LAYER);
                
        intrFrm_InputSet.toFront();
        intrFrm_InputSet.loadData();        
        
    }
    
    private IntrFrm_transDiag popTrandsDiagIntrFrame(String title)
    {
        JInternalFrame framLst[] = rightDesktopPane.getAllFrames();
        for(JInternalFrame i : framLst)
        {
            if(i instanceof IntrFrm_transDiag)
            { 
                if(i.getTitle().equals(title+" | Transition Diagram"))  
                { i.toFront(); return null; }
            }
        }
        
        editor.IntrFrm_transDiag intrFrm_transDiag = new editor.IntrFrm_transDiag();
        
        intrFrm_transDiag.setVisible(true);
        intrFrm_transDiag.setBounds(20, 10, 500, 500);
        rightDesktopPane.add(intrFrm_transDiag, javax.swing.JLayeredPane.DEFAULT_LAYER);        
        
        intrFrm_transDiag.setTitle(title+" | Transition Diagram");
        intrFrm_transDiag.toFront();
        
        return intrFrm_transDiag;

    }
    
    private void popOtherOprIntrFrame()
    {
        JInternalFrame framLst[] = rightDesktopPane.getAllFrames();
        for(JInternalFrame i : framLst)
        {
            if(i instanceof IntrFrm_OtherOpr)
            { i.toFront(); return; }
        }
        
        editor.IntrFrm_OtherOpr intrFrm_OtherOpr = new editor.IntrFrm_OtherOpr();
        
        intrFrm_OtherOpr.setVisible(true);
        intrFrm_OtherOpr.setBounds(40, 20, 332, 470);
        rightDesktopPane.add(intrFrm_OtherOpr, javax.swing.JLayeredPane.DEFAULT_LAYER);
        
        intrFrm_OtherOpr.toFront();
        intrFrm_OtherOpr.loadData();
        
    }
    
    private void popPunctIntrFrame()
    {        
        JInternalFrame framLst[] = rightDesktopPane.getAllFrames();
        for(JInternalFrame i : framLst)
        {
            if(i instanceof IntrFrm_Punctuatrs)
            { i.toFront(); return; }
        }
        
        editor.IntrFrm_Punctuatrs intrFrm_Punctuatrs = new editor.IntrFrm_Punctuatrs();
        
        intrFrm_Punctuatrs.setVisible(true);
        intrFrm_Punctuatrs.setBounds(30, 10, 406, 500);
        rightDesktopPane.add(intrFrm_Punctuatrs, javax.swing.JLayeredPane.DEFAULT_LAYER);
        
        intrFrm_Punctuatrs.toFront();
        intrFrm_Punctuatrs.loadData();
        
    }
    
    private void popGenPropIntrFrame()
    {
        JInternalFrame framLst[] = rightDesktopPane.getAllFrames();
        for(JInternalFrame i : framLst)
        {
            if(i instanceof IntrFrm_GenProperty)
            { i.toFront(); return; }
        }
        
        editor.IntrFrm_GenProperty intrFrm_GenProperty = new editor.IntrFrm_GenProperty();
        
        intrFrm_GenProperty.setVisible(true);
        intrFrm_GenProperty.setBounds(40, 20, 500, 470);
        rightDesktopPane.add(intrFrm_GenProperty, javax.swing.JLayeredPane.DEFAULT_LAYER);
        
        intrFrm_GenProperty.toFront();
        intrFrm_GenProperty.loadData(filePath);
                
    }
    
    private void popSyntaxToolkit()
    {        
        IntrFrm_Syntax intrFrm_Syntax = new editor.IntrFrm_Syntax();
        
        intrFrm_Syntax.setVisible(true);
        intrFrm_Syntax.setBounds(20, 10, 700, 500);
        rightDesktopPane.add(intrFrm_Syntax, javax.swing.JLayeredPane.DEFAULT_LAYER);
        
        intrFrm_Syntax.toFront();        
    }
            
    
    
    private boolean chkFileExt(String path)
    {
        boolean flag=true;
        String p="",ext="";
        StringTokenizer st =new StringTokenizer(path,".");
        
        try
        {               
            p=st.nextToken();
            ext=st.nextToken();                          
               
            if(!ext.equals("mdc"))                   
            { flag=false; }
               
        }catch(NoSuchElementException no)
        { flag=false; }
        
        return flag;
    }
    
    private String insertFileExt(String path)
    {
        String p="",ext="";
                try
                {               
                    StringTokenizer st =new StringTokenizer(path,".");
                       p=st.nextToken();
                       ext=st.nextToken();                          
               
                   if(!ext.equals("mdc"))                   
                   { path=p+".mdc"; }
               
                }catch(NoSuchElementException no)
                { path+=".mdc"; }
        
                return path;
    }
    
    public static void setMessages(String msg,String stMsg,int bar)
    {
        
        if(msg!=null)
        {
           listModel.addElement(msg);
           
           msgBox.ensureIndexIsVisible(msgBox.getModel().getSize()-1);
        }
        
        if(stMsg!=null)
        {            
            statusMsg.setText(stMsg);
        }
        
       
        if(bar==-1)
        {
            progrsBar.setIndeterminate(true);
        }
        else if(bar==100)
        {   
            progrsBar.setIndeterminate(false);
            //statusMsg.setText("");
            progrsBar.setValue(0);
        }        
        else
        {
            progrsBar.setIndeterminate(false);
            //progrsBar.setVisible(true);
            progrsBar.setValue(bar);
        }
    }
    
        
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem New;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenuItem file_exit;
    private javax.swing.JMenuItem file_open;
    private javax.swing.JMenuItem file_save;
    private javax.swing.JMenuItem file_saveAs;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JMenuItem help_about;
    private javax.swing.JMenuItem help_feedback;
    private javax.swing.JTree indexTree;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenu menu_algo;
    private javax.swing.JMenu menu_algo_syntax;
    private javax.swing.JMenuItem menu_algo_syntax_parser;
    private static javax.swing.JList msgBox;
    private static javax.swing.JProgressBar progrsBar;
    private javax.swing.JDesktopPane rightDesktopPane;
    private javax.swing.JSplitPane splitLeftRight;
    private javax.swing.JSplitPane splitTopDown;
    private static javax.swing.JLabel statusMsg;
    private javax.swing.JPanel statusPanel;
    // End of variables declaration//GEN-END:variables

    
    //new javax.swing.ImageIcon(getClass().getResource("/editor/Images/desktpPaneBgLogo.png"))
}
class CompilerTextFilter extends javax.swing.filechooser.FileFilter {

  public boolean accept(File f) {
    if (f.isDirectory())
      return true;
    String s = f.getName();
    int i = s.lastIndexOf('.');

    if (i > 0 && i < s.length() - 1)
      if (s.substring(i + 1).toLowerCase().equals("mdc"))
        return true;

    return false;
  }

  public String getDescription() {
    return "*.mdc";
  }
}